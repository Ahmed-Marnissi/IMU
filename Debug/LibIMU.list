
LibIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dcc  08005dcc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dd4  08005dd4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005ddc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00000150  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d13a  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a27  00000000  00000000  0002d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  0002ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d30  00000000  00000000  0002fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d7c  00000000  00000000  00030748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef6a  00000000  00000000  000514c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb3f3  00000000  00000000  0006042e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b821  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f70  00000000  00000000  0012b874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d40 	.word	0x08005d40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08005d40 	.word	0x08005d40

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b974 	b.w	8000e40 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468e      	mov	lr, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14d      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4694      	mov	ip, r2
 8000b82:	d969      	bls.n	8000c58 <__udivmoddi4+0xe8>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b152      	cbz	r2, 8000ba0 <__udivmoddi4+0x30>
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	f1c2 0120 	rsb	r1, r2, #32
 8000b92:	fa20 f101 	lsr.w	r1, r0, r1
 8000b96:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b9e:	4094      	lsls	r4, r2
 8000ba0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba4:	0c21      	lsrs	r1, r4, #16
 8000ba6:	fbbe f6f8 	udiv	r6, lr, r8
 8000baa:	fa1f f78c 	uxth.w	r7, ip
 8000bae:	fb08 e316 	mls	r3, r8, r6, lr
 8000bb2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bb6:	fb06 f107 	mul.w	r1, r6, r7
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 811f 	bcs.w	8000e08 <__udivmoddi4+0x298>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 811c 	bls.w	8000e08 <__udivmoddi4+0x298>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 f707 	mul.w	r7, r0, r7
 8000be8:	42a7      	cmp	r7, r4
 8000bea:	d90a      	bls.n	8000c02 <__udivmoddi4+0x92>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf4:	f080 810a 	bcs.w	8000e0c <__udivmoddi4+0x29c>
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	f240 8107 	bls.w	8000e0c <__udivmoddi4+0x29c>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c06:	1be4      	subs	r4, r4, r7
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa4>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0xc2>
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	f000 80ef 	beq.w	8000e02 <__udivmoddi4+0x292>
 8000c24:	2600      	movs	r6, #0
 8000c26:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f683 	clz	r6, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d14a      	bne.n	8000cd0 <__udivmoddi4+0x160>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0xd4>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80f9 	bhi.w	8000e36 <__udivmoddi4+0x2c6>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	469e      	mov	lr, r3
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d0e0      	beq.n	8000c14 <__udivmoddi4+0xa4>
 8000c52:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c56:	e7dd      	b.n	8000c14 <__udivmoddi4+0xa4>
 8000c58:	b902      	cbnz	r2, 8000c5c <__udivmoddi4+0xec>
 8000c5a:	deff      	udf	#255	; 0xff
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f040 8092 	bne.w	8000d8a <__udivmoddi4+0x21a>
 8000c66:	eba1 010c 	sub.w	r1, r1, ip
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2601      	movs	r6, #1
 8000c74:	0c20      	lsrs	r0, r4, #16
 8000c76:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c7a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c7e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c82:	fb0e f003 	mul.w	r0, lr, r3
 8000c86:	4288      	cmp	r0, r1
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x12c>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x12a>
 8000c94:	4288      	cmp	r0, r1
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2c0>
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	1a09      	subs	r1, r1, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ca8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x156>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x154>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2ca>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cce:	e79c      	b.n	8000c0a <__udivmoddi4+0x9a>
 8000cd0:	f1c6 0720 	rsb	r7, r6, #32
 8000cd4:	40b3      	lsls	r3, r6
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa20 f407 	lsr.w	r4, r0, r7
 8000ce2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ce6:	431c      	orrs	r4, r3
 8000ce8:	40f9      	lsrs	r1, r7
 8000cea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cee:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cf6:	0c20      	lsrs	r0, r4, #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	fb09 1118 	mls	r1, r9, r8, r1
 8000d00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d04:	fb08 f00e 	mul.w	r0, r8, lr
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b8>
 8000d10:	eb1c 0101 	adds.w	r1, ip, r1
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2bc>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2bc>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4461      	add	r1, ip
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d30:	fb09 1110 	mls	r1, r9, r0, r1
 8000d34:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	458e      	cmp	lr, r1
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1e2>
 8000d40:	eb1c 0101 	adds.w	r1, ip, r1
 8000d44:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2b4>
 8000d4a:	458e      	cmp	lr, r1
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2b4>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	4461      	add	r1, ip
 8000d52:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d56:	fba0 9402 	umull	r9, r4, r0, r2
 8000d5a:	eba1 010e 	sub.w	r1, r1, lr
 8000d5e:	42a1      	cmp	r1, r4
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46a6      	mov	lr, r4
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x2a4>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x2a0>
 8000d68:	b15d      	cbz	r5, 8000d82 <__udivmoddi4+0x212>
 8000d6a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d6e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d72:	fa01 f707 	lsl.w	r7, r1, r7
 8000d76:	fa22 f306 	lsr.w	r3, r2, r6
 8000d7a:	40f1      	lsrs	r1, r6
 8000d7c:	431f      	orrs	r7, r3
 8000d7e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d82:	2600      	movs	r6, #0
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	f1c2 0320 	rsb	r3, r2, #32
 8000d8e:	40d8      	lsrs	r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa21 f303 	lsr.w	r3, r1, r3
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4301      	orrs	r1, r0
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000da8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dac:	0c0b      	lsrs	r3, r1, #16
 8000dae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000db2:	fb00 f60e 	mul.w	r6, r0, lr
 8000db6:	429e      	cmp	r6, r3
 8000db8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x260>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b8>
 8000dc8:	429e      	cmp	r6, r3
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b8>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1b9b      	subs	r3, r3, r6
 8000dd2:	b289      	uxth	r1, r1
 8000dd4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dd8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ddc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de0:	fb06 f30e 	mul.w	r3, r6, lr
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x28a>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000df6:	3e02      	subs	r6, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	1ac9      	subs	r1, r1, r3
 8000dfc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0x104>
 8000e02:	462e      	mov	r6, r5
 8000e04:	4628      	mov	r0, r5
 8000e06:	e705      	b.n	8000c14 <__udivmoddi4+0xa4>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	e6e3      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	e6f8      	b.n	8000c02 <__udivmoddi4+0x92>
 8000e10:	454b      	cmp	r3, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f8>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f8>
 8000e20:	4646      	mov	r6, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x28a>
 8000e24:	4620      	mov	r0, r4
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1e2>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b8>
 8000e30:	3b02      	subs	r3, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x12c>
 8000e36:	4630      	mov	r0, r6
 8000e38:	e709      	b.n	8000c4e <__udivmoddi4+0xde>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x156>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
 {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 	if(htim==&htim7)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d101      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x14>
 	{
// 		UpdateQuaternion(A,G,M,Q);
	UpdateRpy();
 8000e54:	f001 f84c 	bl	8001ef0 <UpdateRpy>
// 		          Yaw=-Yaw;

 	}


 }
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000110 	.word	0x20000110

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f001 fa76 	bl	8002358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f84e 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 f91a 	bl	80010a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e74:	f000 f8b4 	bl	8000fe0 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000e78:	f000 f8e0 	bl	800103c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
Test=  Setup();
 8000e7c:	f000 f92e 	bl	80010dc <Setup>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <main+0x70>)
 8000e84:	6013      	str	r3, [r2, #0]

SetAccBias(915.12,  492.0,  -1203.31) ;
 8000e86:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8000ed8 <main+0x74>
 8000e8a:	eddf 0a14 	vldr	s1, [pc, #80]	; 8000edc <main+0x78>
 8000e8e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000ee0 <main+0x7c>
 8000e92:	f000 ffc5 	bl	8001e20 <SetAccBias>

SetGyroBias(-78.21, -437.85  , 398.19) ;
 8000e96:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8000ee4 <main+0x80>
 8000e9a:	eddf 0a13 	vldr	s1, [pc, #76]	; 8000ee8 <main+0x84>
 8000e9e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000eec <main+0x88>
 8000ea2:	f000 ffd7 	bl	8001e54 <SetGyroBias>

SetMagBias( 256.83, -143.9 , -246.92 ) ;
 8000ea6:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8000ef0 <main+0x8c>
 8000eaa:	eddf 0a12 	vldr	s1, [pc, #72]	; 8000ef4 <main+0x90>
 8000eae:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000ef8 <main+0x94>
 8000eb2:	f000 ffe9 	bl	8001e88 <SetMagBias>

SetMagScale( 0.87,  1.38,  0.88) ;
 8000eb6:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8000efc <main+0x98>
 8000eba:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f00 <main+0x9c>
 8000ebe:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f04 <main+0xa0>
 8000ec2:	f000 fffb 	bl	8001ebc <SetMagScale>

HAL_TIM_Base_Start_IT(&htim7);
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <main+0xa4>)
 8000ec8:	f003 fb44 	bl	8004554 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 Update();
 8000ecc:	f000 ffa0 	bl	8001e10 <Update>
 8000ed0:	e7fc      	b.n	8000ecc <main+0x68>
 8000ed2:	bf00      	nop
 8000ed4:	200001d8 	.word	0x200001d8
 8000ed8:	c49669ec 	.word	0xc49669ec
 8000edc:	43f60000 	.word	0x43f60000
 8000ee0:	4464c7ae 	.word	0x4464c7ae
 8000ee4:	43c71852 	.word	0x43c71852
 8000ee8:	c3daeccd 	.word	0xc3daeccd
 8000eec:	c29c6b85 	.word	0xc29c6b85
 8000ef0:	c376eb85 	.word	0xc376eb85
 8000ef4:	c30fe666 	.word	0xc30fe666
 8000ef8:	43806a3d 	.word	0x43806a3d
 8000efc:	3f6147ae 	.word	0x3f6147ae
 8000f00:	3fb0a3d7 	.word	0x3fb0a3d7
 8000f04:	3f5eb852 	.word	0x3f5eb852
 8000f08:	20000110 	.word	0x20000110

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	; 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 fb72 	bl	8005604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2310      	movs	r3, #16
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f80:	23a8      	movs	r3, #168	; 0xa8
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0320 	add.w	r3, r7, #32
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fe4b 	bl	8003c2c <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f9c:	f001 f8ce 	bl	800213c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 f8ac 	bl	800411c <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fca:	f001 f8b7 	bl	800213c <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	; 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_I2C1_Init+0x50>)
 8000fe6:	4a13      	ldr	r2, [pc, #76]	; (8001034 <MX_I2C1_Init+0x54>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_I2C1_Init+0x50>)
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <MX_I2C1_Init+0x58>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_I2C1_Init+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_I2C1_Init+0x50>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_I2C1_Init+0x50>)
 8000ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001002:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_I2C1_Init+0x50>)
 800101e:	f001 fcdf 	bl	80029e0 <HAL_I2C_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001028:	f001 f888 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000bc 	.word	0x200000bc
 8001034:	40005400 	.word	0x40005400
 8001038:	000186a0 	.word	0x000186a0

0800103c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_TIM7_Init+0x64>)
 800104c:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <MX_TIM7_Init+0x68>)
 800104e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_TIM7_Init+0x64>)
 8001052:	2263      	movs	r2, #99	; 0x63
 8001054:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_TIM7_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 21000-1;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_TIM7_Init+0x64>)
 800105e:	f245 2207 	movw	r2, #20999	; 0x5207
 8001062:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_TIM7_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_TIM7_Init+0x64>)
 800106c:	f003 fa22 	bl	80044b4 <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001076:	f001 f861 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_TIM7_Init+0x64>)
 8001088:	f003 fca4 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001092:	f001 f853 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000110 	.word	0x20000110
 80010a4:	40001400 	.word	0x40001400

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_GPIO_Init+0x30>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <MX_GPIO_Init+0x30>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_GPIO_Init+0x30>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <Setup>:

/* USER CODE BEGIN 4 */
int  Setup()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	if (IsConnectedMPU9250())
 80010e0:	f000 fdce 	bl	8001c80 <IsConnectedMPU9250>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00a      	beq.n	8001100 <Setup+0x24>
	{
	    InitMPU9250();
 80010ea:	f000 f80d 	bl	8001108 <InitMPU9250>

	        if (IsConnectedAK8963())
 80010ee:	f000 fde7 	bl	8001cc0 <IsConnectedAK8963>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <Setup+0x24>
	        {  InitAK8963();
 80010f8:	f000 f8ea 	bl	80012d0 <InitAK8963>
	        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <Setup+0x26>
	        }
	 }

	return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <InitMPU9250>:



void  InitMPU9250()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
    	AccResolution = GetAccResolution(  MPU9250Settings.AccelFs  );
 800110e:	4b6c      	ldr	r3, [pc, #432]	; (80012c0 <InitMPU9250+0x1b8>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fbb6 	bl	8001884 <GetAccResolution>
 8001118:	eef0 7a40 	vmov.f32	s15, s0
 800111c:	4b69      	ldr	r3, [pc, #420]	; (80012c4 <InitMPU9250+0x1bc>)
 800111e:	edc3 7a00 	vstr	s15, [r3]
        GyroResolution = GetGyroResolution(  MPU9250Settings.GyroFs );
 8001122:	4b67      	ldr	r3, [pc, #412]	; (80012c0 <InitMPU9250+0x1b8>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fbd8 	bl	80018dc <GetGyroResolution>
 800112c:	eef0 7a40 	vmov.f32	s15, s0
 8001130:	4b65      	ldr	r3, [pc, #404]	; (80012c8 <InitMPU9250+0x1c0>)
 8001132:	edc3 7a00 	vstr	s15, [r3]



	        // reset device

			  WriteByte(MpuI2cAddress, (uint8_t )PWR_MGMT_1, 0x80);
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <InitMPU9250+0x1c4>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	216b      	movs	r1, #107	; 0x6b
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fde8 	bl	8001d14 <WriteByte>

			  HAL_Delay(100);
 8001144:	2064      	movs	r0, #100	; 0x64
 8001146:	f001 f979 	bl	800243c <HAL_Delay>

	        // wake up device : Clear sleep mode bit (6), enable all sensors

			  WriteByte(MpuI2cAddress, (uint8_t )PWR_MGMT_1, 0x00);
 800114a:	4b60      	ldr	r3, [pc, #384]	; (80012cc <InitMPU9250+0x1c4>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	216b      	movs	r1, #107	; 0x6b
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fdde 	bl	8001d14 <WriteByte>

			  HAL_Delay(100);
 8001158:	2064      	movs	r0, #100	; 0x64
 800115a:	f001 f96f 	bl	800243c <HAL_Delay>

	        // get stable time source
	        // Auto select clock source to be PLL gyroscope reference if ready else


	    	WriteByte(MpuI2cAddress, (uint8_t )PWR_MGMT_1, 0x01);
 800115e:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <InitMPU9250+0x1c4>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	216b      	movs	r1, #107	; 0x6b
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fdd4 	bl	8001d14 <WriteByte>
	    	HAL_Delay(200);
 800116c:	20c8      	movs	r0, #200	; 0xc8
 800116e:	f001 f965 	bl	800243c <HAL_Delay>
	        // minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	        // be higher than 1 / 0.0059 = 170 Hz
	        // GYRO_DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	        // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz

	        uint8_t MpuConfig = (uint8_t)  MPU9250Settings.GyroDlpfCfg;
 8001172:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <InitMPU9250+0x1b8>)
 8001174:	795b      	ldrb	r3, [r3, #5]
 8001176:	71fb      	strb	r3, [r7, #7]



		    WriteByte(MpuI2cAddress, (uint8_t )MPU_CONFIG, MpuConfig);
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <InitMPU9250+0x1c4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	211a      	movs	r1, #26
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fdc7 	bl	8001d14 <WriteByte>

	        // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	        uint8_t SampleRate = (uint8_t)MPU9250Settings.FifoSampleRate;
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <InitMPU9250+0x1b8>)
 8001188:	78db      	ldrb	r3, [r3, #3]
 800118a:	71bb      	strb	r3, [r7, #6]
	         // Use a 200 Hz rate; a rate consistent with the filter update rate
	                                                            // determined inset in CONFIG above



		    WriteByte(MpuI2cAddress, (uint8_t )SMPLRT_DIV, SampleRate);
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <InitMPU9250+0x1c4>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	79ba      	ldrb	r2, [r7, #6]
 8001192:	2119      	movs	r1, #25
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fdbd 	bl	8001d14 <WriteByte>
	        // Range selects FS_SEL and GFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3

	        // get current GYRO_CONFIG register value
		    uint8_t Reception;

		    Reception= ReadByte(MpuI2cAddress, (uint8_t ) GYRO_CONFIG ) ;
 800119a:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <InitMPU9250+0x1c4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	211b      	movs	r1, #27
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fdd9 	bl	8001d58 <ReadByte>
 80011a6:	4603      	mov	r3, r0
 80011a8:	717b      	strb	r3, [r7, #5]

			Reception = Reception & ~0xE0;                                     // Clear self-test bits [7:5]
 80011aa:	797b      	ldrb	r3, [r7, #5]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	717b      	strb	r3, [r7, #5]
			Reception = Reception & ~0x03;                                     // Clear Fchoice bits [1:0]
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	f023 0303 	bic.w	r3, r3, #3
 80011b8:	717b      	strb	r3, [r7, #5]
			Reception = Reception & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 80011ba:	797b      	ldrb	r3, [r7, #5]
 80011bc:	f023 0318 	bic.w	r3, r3, #24
 80011c0:	717b      	strb	r3, [r7, #5]
			Reception = Reception | ( ((uint8_t) MPU9250Settings.GyroFs )<< 3);       // Set full scale range for the gyro
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <InitMPU9250+0x1b8>)
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	717b      	strb	r3, [r7, #5]
			Reception = Reception | ((~(uint8_t)MPU9250Settings.GyroFChoice) & 0x03);   // Set Fchoice for the gyro
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <InitMPU9250+0x1b8>)
 80011d6:	791b      	ldrb	r3, [r3, #4]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	b25a      	sxtb	r2, r3
 80011e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	717b      	strb	r3, [r7, #5]

	        // Write new GYRO_CONFIG value to register

	        WriteByte(MpuI2cAddress, (uint8_t )GYRO_CONFIG, Reception);
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <InitMPU9250+0x1c4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	797a      	ldrb	r2, [r7, #5]
 80011f4:	211b      	movs	r1, #27
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fd8c 	bl	8001d14 <WriteByte>


	        // get current ACCEL_CONFIG register value


			Reception= ReadByte(MpuI2cAddress, (uint8_t ) ACCEL_CONFIG ) ;
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <InitMPU9250+0x1c4>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	211c      	movs	r1, #28
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fda8 	bl	8001d58 <ReadByte>
 8001208:	4603      	mov	r3, r0
 800120a:	717b      	strb	r3, [r7, #5]

			Reception = Reception & ~0xE0;                                 // Clear self-test bits [7:5]
 800120c:	797b      	ldrb	r3, [r7, #5]
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	717b      	strb	r3, [r7, #5]
			Reception = Reception & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	f023 0318 	bic.w	r3, r3, #24
 800121a:	717b      	strb	r3, [r7, #5]
			Reception = Reception | (  ((uint8_t )MPU9250Settings.AccelFs) << 3);  // Set full scale range for the accelerometer
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <InitMPU9250+0x1b8>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	b25a      	sxtb	r2, r3
 8001224:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001228:	4313      	orrs	r3, r2
 800122a:	b25b      	sxtb	r3, r3
 800122c:	717b      	strb	r3, [r7, #5]


	        // Write new ACCEL_CONFIG register value


	        WriteByte(MpuI2cAddress, (uint8_t )ACCEL_CONFIG, Reception);
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <InitMPU9250+0x1c4>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	797a      	ldrb	r2, [r7, #5]
 8001234:	211c      	movs	r1, #28
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fd6c 	bl	8001d14 <WriteByte>
	        // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz

	        // get current ACCEL_CONFIG2 register value


			Reception= ReadByte(MpuI2cAddress, (uint8_t ) ACCEL_CONFIG2 ) ;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <InitMPU9250+0x1c4>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	211d      	movs	r1, #29
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fd88 	bl	8001d58 <ReadByte>
 8001248:	4603      	mov	r3, r0
 800124a:	717b      	strb	r3, [r7, #5]

			Reception = Reception & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800124c:	797b      	ldrb	r3, [r7, #5]
 800124e:	f023 030f 	bic.w	r3, r3, #15
 8001252:	717b      	strb	r3, [r7, #5]
			Reception = Reception | (~(MPU9250Settings.AccelFChoice << 3) & 0x08);    // Set accel_fchoice_b to 1
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <InitMPU9250+0x1b8>)
 8001256:	799b      	ldrb	r3, [r3, #6]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	b25b      	sxtb	r3, r3
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	b25a      	sxtb	r2, r3
 8001268:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800126c:	4313      	orrs	r3, r2
 800126e:	b25b      	sxtb	r3, r3
 8001270:	717b      	strb	r3, [r7, #5]
			Reception = Reception | ((uint8_t)(MPU9250Settings.AccelDlpfCfg) & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <InitMPU9250+0x1b8>)
 8001274:	79db      	ldrb	r3, [r3, #7]
 8001276:	b25b      	sxtb	r3, r3
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	b25a      	sxtb	r2, r3
 800127e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001282:	4313      	orrs	r3, r2
 8001284:	b25b      	sxtb	r3, r3
 8001286:	717b      	strb	r3, [r7, #5]




			// Write new ACCEL_CONFIG2 register value
			 WriteByte(MpuI2cAddress, (uint8_t )ACCEL_CONFIG2, Reception);
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <InitMPU9250+0x1c4>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	797a      	ldrb	r2, [r7, #5]
 800128e:	211d      	movs	r1, #29
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fd3f 	bl	8001d14 <WriteByte>
	        // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
	        // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
	        // can join the I2C bus and all can be controlled by the Arduino as master


	      	WriteByte(MpuI2cAddress, (uint8_t )INT_PIN_CFG, 0x22);
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <InitMPU9250+0x1c4>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2222      	movs	r2, #34	; 0x22
 800129c:	2137      	movs	r1, #55	; 0x37
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fd38 	bl	8001d14 <WriteByte>


	        // Enable data ready (bit 0) interrupt


		    WriteByte(MpuI2cAddress, (uint8_t )INT_ENABLE, 0x01);
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <InitMPU9250+0x1c4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	2138      	movs	r1, #56	; 0x38
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fd31 	bl	8001d14 <WriteByte>


	        HAL_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f001 f8c2 	bl	800243c <HAL_Delay>




}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000158 	.word	0x20000158
 80012c8:	2000015c 	.word	0x2000015c
 80012cc:	20000008 	.word	0x20000008

080012d0 <InitAK8963>:

void InitAK8963()

{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0

	MagResolution = GetMagResolution(MPU9250Settings.MagOutputBits);
 80012d6:	4b55      	ldr	r3, [pc, #340]	; (800142c <InitAK8963+0x15c>)
 80012d8:	789b      	ldrb	r3, [r3, #2]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f9a6 	bl	800162c <GetMagResolution>
 80012e0:	eef0 7a40 	vmov.f32	s15, s0
 80012e4:	4b52      	ldr	r3, [pc, #328]	; (8001430 <InitAK8963+0x160>)
 80012e6:	edc3 7a00 	vstr	s15, [r3]
uint8_t RawData[3];                            // x/y/z Mag calibration data stored here
// Power down magnetometer



WriteByte(MagI2cAddress, (uint8_t )AK8963_CNTL, 0x00);
 80012ea:	4b52      	ldr	r3, [pc, #328]	; (8001434 <InitAK8963+0x164>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2200      	movs	r2, #0
 80012f0:	210a      	movs	r1, #10
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fd0e 	bl	8001d14 <WriteByte>
HAL_Delay(10);
 80012f8:	200a      	movs	r0, #10
 80012fa:	f001 f89f 	bl	800243c <HAL_Delay>

// Enter Fuse ROM access mode


WriteByte(MagI2cAddress, (uint8_t )AK8963_CNTL, 0x0F);
 80012fe:	4b4d      	ldr	r3, [pc, #308]	; (8001434 <InitAK8963+0x164>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	220f      	movs	r2, #15
 8001304:	210a      	movs	r1, #10
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fd04 	bl	8001d14 <WriteByte>
HAL_Delay(10);
 800130c:	200a      	movs	r0, #10
 800130e:	f001 f895 	bl	800243c <HAL_Delay>



ReadBytes(MagI2cAddress,( uint8_t )AK8963_ASAX ,3 ,  RawData);
 8001312:	4b48      	ldr	r3, [pc, #288]	; (8001434 <InitAK8963+0x164>)
 8001314:	7818      	ldrb	r0, [r3, #0]
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2203      	movs	r2, #3
 800131a:	2110      	movs	r1, #16
 800131c:	f000 fd4a 	bl	8001db4 <ReadBytes>

// Read the x-, y-, and z-axis calibration values
MagBiasFactory[0] = (float)(RawData[0] - 128) / 256. + 1.;  // Return x-axis sensitivity adjustment values, etc.
 8001320:	793b      	ldrb	r3, [r7, #4]
 8001322:	3b80      	subs	r3, #128	; 0x80
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	ee17 0a90 	vmov	r0, s15
 8001330:	f7ff f8ae 	bl	8000490 <__aeabi_f2d>
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <InitAK8963+0x168>)
 800133a:	f7ff fa2b 	bl	8000794 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b3c      	ldr	r3, [pc, #240]	; (800143c <InitAK8963+0x16c>)
 800134c:	f7fe ff42 	bl	80001d4 <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fba2 	bl	8000aa0 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	4a38      	ldr	r2, [pc, #224]	; (8001440 <InitAK8963+0x170>)
 8001360:	6013      	str	r3, [r2, #0]
MagBiasFactory[1] = (float)(RawData[1] - 128) / 256. + 1.;
 8001362:	797b      	ldrb	r3, [r7, #5]
 8001364:	3b80      	subs	r3, #128	; 0x80
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	ee17 0a90 	vmov	r0, s15
 8001372:	f7ff f88d 	bl	8000490 <__aeabi_f2d>
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <InitAK8963+0x168>)
 800137c:	f7ff fa0a 	bl	8000794 <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <InitAK8963+0x16c>)
 800138e:	f7fe ff21 	bl	80001d4 <__adddf3>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fb81 	bl	8000aa0 <__aeabi_d2f>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <InitAK8963+0x170>)
 80013a2:	6053      	str	r3, [r2, #4]
MagBiasFactory[2] = (float)(RawData[2] - 128) / 256. + 1.;
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	3b80      	subs	r3, #128	; 0x80
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b0:	ee17 0a90 	vmov	r0, s15
 80013b4:	f7ff f86c 	bl	8000490 <__aeabi_f2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <InitAK8963+0x168>)
 80013be:	f7ff f9e9 	bl	8000794 <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <InitAK8963+0x16c>)
 80013d0:	f7fe ff00 	bl	80001d4 <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fb60 	bl	8000aa0 <__aeabi_d2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <InitAK8963+0x170>)
 80013e4:	6093      	str	r3, [r2, #8]


// Power down magnetometer

WriteByte(MagI2cAddress, (uint8_t )AK8963_CNTL, 0x00);
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <InitAK8963+0x164>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	210a      	movs	r1, #10
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fc90 	bl	8001d14 <WriteByte>
HAL_Delay(10);
 80013f4:	200a      	movs	r0, #10
 80013f6:	f001 f821 	bl	800243c <HAL_Delay>
// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
// and enable continuous mode data acquisition MAG_MODE (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates

// Set magnetometer data resolution and sample ODR

uint8_t D=0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	71fb      	strb	r3, [r7, #7]
D =( ((uint8_t)MPU9250Settings.MagOutputBits )<< 4 | MAG_MODE);
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <InitAK8963+0x15c>)
 8001400:	789b      	ldrb	r3, [r3, #2]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	b25a      	sxtb	r2, r3
 8001406:	2306      	movs	r3, #6
 8001408:	b25b      	sxtb	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b25b      	sxtb	r3, r3
 800140e:	71fb      	strb	r3, [r7, #7]


WriteByte(MagI2cAddress, (uint8_t )AK8963_CNTL, D);
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <InitAK8963+0x164>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	79fa      	ldrb	r2, [r7, #7]
 8001416:	210a      	movs	r1, #10
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fc7b 	bl	8001d14 <WriteByte>
HAL_Delay(10);
 800141e:	200a      	movs	r0, #10
 8001420:	f001 f80c 	bl	800243c <HAL_Delay>

}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	20000160 	.word	0x20000160
 8001434:	20000009 	.word	0x20000009
 8001438:	40700000 	.word	0x40700000
 800143c:	3ff00000 	.word	0x3ff00000
 8001440:	2000017c 	.word	0x2000017c

08001444 <ReadAccelGyro>:

void ReadAccelGyro (int16_t* Destination)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    uint8_t RawData[14];

    // Read the 14 raw data registers into data array
	ReadBytes(MpuI2cAddress,( uint8_t )ACCEL_XOUT_H ,14,  RawData);
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <ReadAccelGyro+0xac>)
 800144e:	7818      	ldrb	r0, [r3, #0]
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	220e      	movs	r2, #14
 8001456:	213b      	movs	r1, #59	; 0x3b
 8001458:	f000 fcac 	bl	8001db4 <ReadBytes>


	// Turn the MSB and LSB into a signed 16-bit value
    Destination[0] = ((int16_t)RawData[0] << 8) | (int16_t)RawData[1];
 800145c:	7a3b      	ldrb	r3, [r7, #8]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7a7b      	ldrb	r3, [r7, #9]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21a      	sxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	801a      	strh	r2, [r3, #0]
    Destination[1] = ((int16_t)RawData[2] << 8) | (int16_t)RawData[3];
 800146e:	7abb      	ldrb	r3, [r7, #10]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b219      	sxth	r1, r3
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3302      	adds	r3, #2
 800147c:	430a      	orrs	r2, r1
 800147e:	b212      	sxth	r2, r2
 8001480:	801a      	strh	r2, [r3, #0]
    Destination[2] = ((int16_t)RawData[4] << 8) | (int16_t)RawData[5];
 8001482:	7b3b      	ldrb	r3, [r7, #12]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b219      	sxth	r1, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	b21a      	sxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3304      	adds	r3, #4
 8001490:	430a      	orrs	r2, r1
 8001492:	b212      	sxth	r2, r2
 8001494:	801a      	strh	r2, [r3, #0]
    Destination[3] = ((int16_t)RawData[6] << 8) | (int16_t)RawData[7];
 8001496:	7bbb      	ldrb	r3, [r7, #14]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b219      	sxth	r1, r3
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	b21a      	sxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3306      	adds	r3, #6
 80014a4:	430a      	orrs	r2, r1
 80014a6:	b212      	sxth	r2, r2
 80014a8:	801a      	strh	r2, [r3, #0]
    Destination[4] = ((int16_t)RawData[8] << 8) | (int16_t)RawData[9];
 80014aa:	7c3b      	ldrb	r3, [r7, #16]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b219      	sxth	r1, r3
 80014b0:	7c7b      	ldrb	r3, [r7, #17]
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3308      	adds	r3, #8
 80014b8:	430a      	orrs	r2, r1
 80014ba:	b212      	sxth	r2, r2
 80014bc:	801a      	strh	r2, [r3, #0]
    Destination[5] = ((int16_t)RawData[10] << 8) | (int16_t)RawData[11];
 80014be:	7cbb      	ldrb	r3, [r7, #18]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b219      	sxth	r1, r3
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	330a      	adds	r3, #10
 80014cc:	430a      	orrs	r2, r1
 80014ce:	b212      	sxth	r2, r2
 80014d0:	801a      	strh	r2, [r3, #0]
    Destination[6] = ((int16_t)RawData[12] << 8) | (int16_t)RawData[13];
 80014d2:	7d3b      	ldrb	r3, [r7, #20]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b219      	sxth	r1, r3
 80014d8:	7d7b      	ldrb	r3, [r7, #21]
 80014da:	b21a      	sxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	330c      	adds	r3, #12
 80014e0:	430a      	orrs	r2, r1
 80014e2:	b212      	sxth	r2, r2
 80014e4:	801a      	strh	r2, [r3, #0]

}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	00000000 	.word	0x00000000

080014f8 <UpdateAccelGyro>:


 void UpdateAccelGyro()
 {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
        int16_t RawAccGyroData[7];
        ReadAccelGyro(RawAccGyroData);
 80014fe:	463b      	mov	r3, r7
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff9f 	bl	8001444 <ReadAccelGyro>


        // Now we'll calculate the accleration value into actual g's
        A[0] = (float)RawAccGyroData[0] * AccResolution;  // get actual g value, this depends on scale being set
 8001506:	f9b7 3000 	ldrsh.w	r3, [r7]
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <UpdateAccelGyro+0x118>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <UpdateAccelGyro+0x11c>)
 800151e:	edc3 7a00 	vstr	s15, [r3]
        A[1] = (float)RawAccGyroData[1] * AccResolution;
 8001522:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152e:	4b38      	ldr	r3, [pc, #224]	; (8001610 <UpdateAccelGyro+0x118>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <UpdateAccelGyro+0x11c>)
 800153a:	edc3 7a01 	vstr	s15, [r3, #4]
        A[2] = (float)RawAccGyroData[2] * AccResolution;
 800153e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <UpdateAccelGyro+0x118>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <UpdateAccelGyro+0x11c>)
 8001556:	edc3 7a02 	vstr	s15, [r3, #8]

        TemperatureCount = RawAccGyroData[3];                  // Read the adc values
 800155a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <UpdateAccelGyro+0x120>)
 8001560:	801a      	strh	r2, [r3, #0]
        Temperature = ((float)TemperatureCount) / 333.87 + 21.0;  // Temperature in degrees Centigrade
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <UpdateAccelGyro+0x120>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f7fe ff8c 	bl	8000490 <__aeabi_f2d>
 8001578:	a323      	add	r3, pc, #140	; (adr r3, 8001608 <UpdateAccelGyro+0x110>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f909 	bl	8000794 <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <UpdateAccelGyro+0x124>)
 8001590:	f7fe fe20 	bl	80001d4 <__adddf3>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f7ff fa80 	bl	8000aa0 <__aeabi_d2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <UpdateAccelGyro+0x128>)
 80015a4:	6013      	str	r3, [r2, #0]

        // Calculate the gyro value into actual degrees per second
        G[0] = (float)RawAccGyroData[4] * GyroResolution;  // get actual gyro value, this depends on scale being set
 80015a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <UpdateAccelGyro+0x12c>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <UpdateAccelGyro+0x130>)
 80015be:	edc3 7a00 	vstr	s15, [r3]
        G[1] = (float)RawAccGyroData[5] * GyroResolution;
 80015c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <UpdateAccelGyro+0x12c>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <UpdateAccelGyro+0x130>)
 80015da:	edc3 7a01 	vstr	s15, [r3, #4]
        G[2] = (float)RawAccGyroData[6] * GyroResolution;
 80015de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <UpdateAccelGyro+0x12c>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <UpdateAccelGyro+0x130>)
 80015f6:	edc3 7a02 	vstr	s15, [r3, #8]
    }
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	851eb852 	.word	0x851eb852
 800160c:	4074ddeb 	.word	0x4074ddeb
 8001610:	20000158 	.word	0x20000158
 8001614:	200001a0 	.word	0x200001a0
 8001618:	200001c4 	.word	0x200001c4
 800161c:	40350000 	.word	0x40350000
 8001620:	200001c8 	.word	0x200001c8
 8001624:	2000015c 	.word	0x2000015c
 8001628:	200001ac 	.word	0x200001ac

0800162c <GetMagResolution>:


 float GetMagResolution( MAG_OUTPUT_BITS MagOutputBits)
 {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
     switch (MagOutputBits)
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <GetMagResolution+0x16>
 800163c:	2b01      	cmp	r3, #1
 800163e:	d002      	beq.n	8001646 <GetMagResolution+0x1a>
 8001640:	e003      	b.n	800164a <GetMagResolution+0x1e>
     {
         // Possible magnetometer scales (and their register bit settings) are:
         // 14 bit resolution (0) and 16 bit resolution (1)
         // Proper scale to return milliGauss
         case M14BITS:
             return (float)(10.0 * 4912.0 / 8190.0);
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <GetMagResolution+0x34>)
 8001644:	e003      	b.n	800164e <GetMagResolution+0x22>
         case M16BITS:
             return (float)(10.0 * 4912.0 / 32760.0);
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <GetMagResolution+0x38>)
 8001648:	e001      	b.n	800164e <GetMagResolution+0x22>
         default:
             return 0.0;
 800164a:	f04f 0300 	mov.w	r3, #0
     }
 }
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40bfebff 	.word	0x40bfebff
 8001664:	3fbfebff 	.word	0x3fbfebff

08001668 <ReadMag>:
 int  ReadMag (int16_t* Destination)
 {
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af02      	add	r7, sp, #8
 800166e:	6078      	str	r0, [r7, #4]


 	uint8_t St1=0;
 8001670:	2300      	movs	r3, #0
 8001672:	75bb      	strb	r3, [r7, #22]
 	uint8_t RegisterSt1 =AK8963_ST1 ;
 8001674:	2302      	movs	r3, #2
 8001676:	757b      	strb	r3, [r7, #21]



 	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)MagI2cAddress,&RegisterSt1,1,1000) != HAL_OK);
 8001678:	bf00      	nop
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <ReadMag+0xf0>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b299      	uxth	r1, r3
 8001680:	f107 0215 	add.w	r2, r7, #21
 8001684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2301      	movs	r3, #1
 800168c:	4833      	ldr	r0, [pc, #204]	; (800175c <ReadMag+0xf4>)
 800168e:	f001 faeb 	bl	8002c68 <HAL_I2C_Master_Transmit>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <ReadMag+0x12>
 	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)MagI2cAddress,&St1,1,1000) != HAL_OK);
 8001698:	bf00      	nop
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <ReadMag+0xf0>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b299      	uxth	r1, r3
 80016a0:	f107 0216 	add.w	r2, r7, #22
 80016a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	482b      	ldr	r0, [pc, #172]	; (800175c <ReadMag+0xf4>)
 80016ae:	f001 fbd9 	bl	8002e64 <HAL_I2C_Master_Receive>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <ReadMag+0x32>

 	St1=ReadByte(MagI2cAddress, (uint8_t )AK8963_ST1);
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <ReadMag+0xf0>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2102      	movs	r1, #2
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fb4a 	bl	8001d58 <ReadByte>
 80016c4:	4603      	mov	r3, r0
 80016c6:	75bb      	strb	r3, [r7, #22]


 	if (St1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 80016c8:	7dbb      	ldrb	r3, [r7, #22]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d03d      	beq.n	800174e <ReadMag+0xe6>
 		uint8_t RawData[7];

 		// x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition


 		ReadBytes(MagI2cAddress,( uint8_t )AK8963_XOUT_L ,7 ,  RawData);
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <ReadMag+0xf0>)
 80016d4:	7818      	ldrb	r0, [r3, #0]
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	2207      	movs	r2, #7
 80016dc:	2103      	movs	r1, #3
 80016de:	f000 fb69 	bl	8001db4 <ReadBytes>
 		// Read the six raw data and ST2 registers sequentially into data array
 		if (MAG_MODE == 0x02 || MAG_MODE == 0x04 || MAG_MODE == 0x06) {  // continuous or external trigger read mode
 80016e2:	2306      	movs	r3, #6
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d005      	beq.n	80016f4 <ReadMag+0x8c>
 80016e8:	2306      	movs	r3, #6
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d002      	beq.n	80016f4 <ReadMag+0x8c>
 80016ee:	2306      	movs	r3, #6
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d106      	bne.n	8001702 <ReadMag+0x9a>
 			if ((St1 & 0x02) != 0)                                       // check if data is not skipped
 80016f4:	7dbb      	ldrb	r3, [r7, #22]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <ReadMag+0x9a>
 				return 0;                                            // this should be after data reading to clear DRDY register
 80016fe:	2300      	movs	r3, #0
 8001700:	e026      	b.n	8001750 <ReadMag+0xe8>
 		}

 		uint8_t C = RawData[6];                                         // End data read by reading ST2 register
 8001702:	7cbb      	ldrb	r3, [r7, #18]
 8001704:	75fb      	strb	r3, [r7, #23]
 		if (!(C & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d11e      	bne.n	800174e <ReadMag+0xe6>
 			Destination[0] = ((int16_t)RawData[1] << 8) | RawData[0];  // Turn the MSB and LSB into a signed 16-bit value
 8001710:	7b7b      	ldrb	r3, [r7, #13]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	7b3b      	ldrb	r3, [r7, #12]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21a      	sxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	801a      	strh	r2, [r3, #0]
 			Destination[1] = ((int16_t)RawData[3] << 8) | RawData[2];  // Data stored as little Endian
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b219      	sxth	r1, r3
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	b21a      	sxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3302      	adds	r3, #2
 8001730:	430a      	orrs	r2, r1
 8001732:	b212      	sxth	r2, r2
 8001734:	801a      	strh	r2, [r3, #0]
 			Destination[2] = ((int16_t)RawData[5] << 8) | RawData[4];
 8001736:	7c7b      	ldrb	r3, [r7, #17]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b219      	sxth	r1, r3
 800173c:	7c3b      	ldrb	r3, [r7, #16]
 800173e:	b21a      	sxth	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3304      	adds	r3, #4
 8001744:	430a      	orrs	r2, r1
 8001746:	b212      	sxth	r2, r2
 8001748:	801a      	strh	r2, [r3, #0]
 			return 1;
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <ReadMag+0xe8>
 		}
 	}

 	return 0;
 800174e:	2300      	movs	r3, #0

     }
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000009 	.word	0x20000009
 800175c:	200000bc 	.word	0x200000bc

08001760 <UpdateMag>:

    void UpdateMag() {
 8001760:	b580      	push	{r7, lr}
 8001762:	ed2d 8b02 	vpush	{d8}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
        int16_t MagCount[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 800176a:	2300      	movs	r3, #0
 800176c:	80bb      	strh	r3, [r7, #4]
 800176e:	2300      	movs	r3, #0
 8001770:	80fb      	strh	r3, [r7, #6]
 8001772:	2300      	movs	r3, #0
 8001774:	813b      	strh	r3, [r7, #8]

        // Read the x/y/z adc values
        if ( ReadMag (MagCount)) {
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff75 	bl	8001668 <ReadMag>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d06e      	beq.n	8001862 <UpdateMag+0x102>
            // Calculate the magnetometer values in milliGauss
            // Include factory calibration per data sheet and user environmental corrections
            // mag_bias is calcurated in 16BITS
            float BiasToCurrentBits = MagResolution /  GetMagResolution(M16BITS);
 8001784:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <UpdateMag+0x110>)
 8001786:	ed93 8a00 	vldr	s16, [r3]
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff ff4e 	bl	800162c <GetMagResolution>
 8001790:	eeb0 7a40 	vmov.f32	s14, s0
 8001794:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001798:	edc7 7a03 	vstr	s15, [r7, #12]


            M[0] = (float)(MagCount[0] * MagResolution * MagBiasFactory[0] - MagBias[0] * BiasToCurrentBits) * MagScale[0];  // get actual magnetometer value, this depends on scale being set
 800179c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <UpdateMag+0x110>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b2:	4b30      	ldr	r3, [pc, #192]	; (8001874 <UpdateMag+0x114>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <UpdateMag+0x118>)
 80017be:	edd3 6a00 	vldr	s13, [r3]
 80017c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <UpdateMag+0x11c>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <UpdateMag+0x120>)
 80017da:	edc3 7a00 	vstr	s15, [r3]
            M[1] = (float)(MagCount[1] * MagResolution * MagBiasFactory[1] - MagBias[1] * BiasToCurrentBits) * MagScale[1];
 80017de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <UpdateMag+0x110>)
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <UpdateMag+0x114>)
 80017f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80017fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <UpdateMag+0x118>)
 8001800:	edd3 6a01 	vldr	s13, [r3, #4]
 8001804:	edd7 7a03 	vldr	s15, [r7, #12]
 8001808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <UpdateMag+0x11c>)
 8001812:	edd3 7a01 	vldr	s15, [r3, #4]
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <UpdateMag+0x120>)
 800181c:	edc3 7a01 	vstr	s15, [r3, #4]
            M[2] = (float)(MagCount[2] * MagResolution * MagBiasFactory[2] - MagBias[2] * BiasToCurrentBits) * MagScale[2];
 8001820:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <UpdateMag+0x110>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <UpdateMag+0x114>)
 8001838:	edd3 7a02 	vldr	s15, [r3, #8]
 800183c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <UpdateMag+0x118>)
 8001842:	edd3 6a02 	vldr	s13, [r3, #8]
 8001846:	edd7 7a03 	vldr	s15, [r7, #12]
 800184a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <UpdateMag+0x11c>)
 8001854:	edd3 7a02 	vldr	s15, [r3, #8]
 8001858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <UpdateMag+0x120>)
 800185e:	edc3 7a02 	vstr	s15, [r3, #8]
        }
    }
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	ecbd 8b02 	vpop	{d8}
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000160 	.word	0x20000160
 8001874:	2000017c 	.word	0x2000017c
 8001878:	20000188 	.word	0x20000188
 800187c:	20000194 	.word	0x20000194
 8001880:	200001b8 	.word	0x200001b8

08001884 <GetAccResolution>:



 float GetAccResolution(ACCEL_FS_SEL AccelFs)
 {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
     switch (AccelFs) {
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d817      	bhi.n	80018c4 <GetAccResolution+0x40>
 8001894:	a201      	add	r2, pc, #4	; (adr r2, 800189c <GetAccResolution+0x18>)
 8001896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189a:	bf00      	nop
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	080018b3 	.word	0x080018b3
 80018a4:	080018b9 	.word	0x080018b9
 80018a8:	080018bf 	.word	0x080018bf
         // Possible accelerometer scales (and their register bit settings) are:
         // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
         // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
         case A2G:
             return 2.0 / 32768.0;
 80018ac:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 80018b0:	e00a      	b.n	80018c8 <GetAccResolution+0x44>
         case A4G:
             return 4.0 / 32768.0;
 80018b2:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 80018b6:	e007      	b.n	80018c8 <GetAccResolution+0x44>
         case A8G:
             return 8.0 / 32768.0;
 80018b8:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 80018bc:	e004      	b.n	80018c8 <GetAccResolution+0x44>
         case A16G:
             return 16.0 / 32768.0;
 80018be:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 80018c2:	e001      	b.n	80018c8 <GetAccResolution+0x44>
         default:
             return 0.0;
 80018c4:	f04f 0300 	mov.w	r3, #0
     }
 }
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop

080018dc <GetGyroResolution>:

 float GetGyroResolution ( GYRO_FS_SEL GyroFs)
 {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
     switch (GyroFs) {
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d813      	bhi.n	8001914 <GetGyroResolution+0x38>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <GetGyroResolution+0x18>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001911 	.word	0x08001911
         // Possible gyro scales (and their register bit settings) are:
         // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
         // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
         case G250DPS:
             return 250.0 / 32768.0;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <GetGyroResolution+0x50>)
 8001906:	e007      	b.n	8001918 <GetGyroResolution+0x3c>
         case G500DPS:
             return 500.0 / 32768.0;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <GetGyroResolution+0x54>)
 800190a:	e005      	b.n	8001918 <GetGyroResolution+0x3c>
         case G1000DPS:
             return 1000.0 / 32768.0;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <GetGyroResolution+0x58>)
 800190e:	e003      	b.n	8001918 <GetGyroResolution+0x3c>
         case G2000DPS:
             return 2000.0 / 32768.0;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <GetGyroResolution+0x5c>)
 8001912:	e001      	b.n	8001918 <GetGyroResolution+0x3c>
         default:
             return 0.;
 8001914:	f04f 0300 	mov.w	r3, #0
     }
 }
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	3bfa0000 	.word	0x3bfa0000
 8001930:	3c7a0000 	.word	0x3c7a0000
 8001934:	3cfa0000 	.word	0x3cfa0000
 8001938:	3d7a0000 	.word	0x3d7a0000

0800193c <WriteAccelOffset>:

  }


  void WriteAccelOffset()
  {
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
      // factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
      // non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
      // compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
      // the accelerometer biases calculated above must be divided by 8.

      uint8_t ReadData[2] = {0,0};
 8001942:	2300      	movs	r3, #0
 8001944:	833b      	strh	r3, [r7, #24]

      // A place to hold the factory accelerometer trim biases :
      int16_t AccBiasReg[3] = {0, 0, 0};
 8001946:	2300      	movs	r3, #0
 8001948:	823b      	strh	r3, [r7, #16]
 800194a:	2300      	movs	r3, #0
 800194c:	827b      	strh	r3, [r7, #18]
 800194e:	2300      	movs	r3, #0
 8001950:	82bb      	strh	r3, [r7, #20]
      // Read factory accelerometer trim values :

      ReadBytes(MpuI2cAddress,(uint8_t) XA_OFFSET_H, 2, &ReadData[0]);
 8001952:	4b79      	ldr	r3, [pc, #484]	; (8001b38 <WriteAccelOffset+0x1fc>)
 8001954:	7818      	ldrb	r0, [r3, #0]
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	2202      	movs	r2, #2
 800195c:	2177      	movs	r1, #119	; 0x77
 800195e:	f000 fa29 	bl	8001db4 <ReadBytes>
      AccBiasReg[0] = ((int16_t)ReadData[0] << 8) | ReadData[1];
 8001962:	7e3b      	ldrb	r3, [r7, #24]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	b21a      	sxth	r2, r3
 8001968:	7e7b      	ldrb	r3, [r7, #25]
 800196a:	b21b      	sxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b21b      	sxth	r3, r3
 8001970:	823b      	strh	r3, [r7, #16]



      ReadBytes(MpuI2cAddress,(uint8_t) YA_OFFSET_H, 2, &ReadData[0]);
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <WriteAccelOffset+0x1fc>)
 8001974:	7818      	ldrb	r0, [r3, #0]
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	2202      	movs	r2, #2
 800197c:	217a      	movs	r1, #122	; 0x7a
 800197e:	f000 fa19 	bl	8001db4 <ReadBytes>
      AccBiasReg[1] = ((int16_t)ReadData[0] << 8) | ReadData[1] ;
 8001982:	7e3b      	ldrb	r3, [r7, #24]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	b21a      	sxth	r2, r3
 8001988:	7e7b      	ldrb	r3, [r7, #25]
 800198a:	b21b      	sxth	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b21b      	sxth	r3, r3
 8001990:	827b      	strh	r3, [r7, #18]




      ReadBytes(MpuI2cAddress,(uint8_t) ZA_OFFSET_H, 2, &ReadData[0]);
 8001992:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <WriteAccelOffset+0x1fc>)
 8001994:	7818      	ldrb	r0, [r3, #0]
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	2202      	movs	r2, #2
 800199c:	217d      	movs	r1, #125	; 0x7d
 800199e:	f000 fa09 	bl	8001db4 <ReadBytes>
      AccBiasReg[2] = ((int16_t)ReadData[0] << 8) | ReadData[1] ;
 80019a2:	7e3b      	ldrb	r3, [r7, #24]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	7e7b      	ldrb	r3, [r7, #25]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	82bb      	strh	r3, [r7, #20]



      // Define array to hold mask bit for each accelerometer bias axis :

      int16_t MaskBit[3] = {1, 1, 1};
 80019b2:	4a62      	ldr	r2, [pc, #392]	; (8001b3c <WriteAccelOffset+0x200>)
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019bc:	6018      	str	r0, [r3, #0]
 80019be:	3304      	adds	r3, #4
 80019c0:	8019      	strh	r1, [r3, #0]

      for (int i = 0; i < 3; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e061      	b.n	8001a8c <WriteAccelOffset+0x150>

      {

    	  if (AccBiasReg[i] % 2)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	3320      	adds	r3, #32
 80019ce:	443b      	add	r3, r7
 80019d0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <WriteAccelOffset+0xb2>
          {
        	  MaskBit[i] = 0;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	3320      	adds	r3, #32
 80019e6:	443b      	add	r3, r7
 80019e8:	2200      	movs	r2, #0
 80019ea:	f823 2c18 	strh.w	r2, [r3, #-24]
          }

          // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g :
          AccBiasReg[i] -= (int16_t)AccBias[i] >> 3;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	3320      	adds	r3, #32
 80019f4:	443b      	add	r3, r7
 80019f6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4950      	ldr	r1, [pc, #320]	; (8001b40 <WriteAccelOffset+0x204>)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 3a90 	vmov	r3, s15
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	10db      	asrs	r3, r3, #3
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	3320      	adds	r3, #32
 8001a24:	443b      	add	r3, r7
 8001a26:	f823 2c10 	strh.w	r2, [r3, #-16]

          if (MaskBit[i])
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	3320      	adds	r3, #32
 8001a30:	443b      	add	r3, r7
 8001a32:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d016      	beq.n	8001a68 <WriteAccelOffset+0x12c>
          {   // Preserve temperature compensation bit :
        	  AccBiasReg[i] = AccBiasReg[i] & ~MaskBit[i];
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	3320      	adds	r3, #32
 8001a40:	443b      	add	r3, r7
 8001a42:	f933 2c10 	ldrsh.w	r2, [r3, #-16]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	3320      	adds	r3, #32
 8001a4c:	443b      	add	r3, r7
 8001a4e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4013      	ands	r3, r2
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	3320      	adds	r3, #32
 8001a60:	443b      	add	r3, r7
 8001a62:	f823 2c10 	strh.w	r2, [r3, #-16]
 8001a66:	e00e      	b.n	8001a86 <WriteAccelOffset+0x14a>
          }
          else
          {	  // Preserve temperature compensation bit :
        	  AccBiasReg[i] = AccBiasReg[i] | 0x0001;
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	3320      	adds	r3, #32
 8001a6e:	443b      	add	r3, r7
 8001a70:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	3320      	adds	r3, #32
 8001a80:	443b      	add	r3, r7
 8001a82:	f823 2c10 	strh.w	r2, [r3, #-16]
      for (int i = 0; i < 3; i++)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	dd9a      	ble.n	80019c8 <WriteAccelOffset+0x8c>
          }
      }

      uint8_t WriteData[6] = {0,0,0,0,0,0};
 8001a92:	4a2c      	ldr	r2, [pc, #176]	; (8001b44 <WriteAccelOffset+0x208>)
 8001a94:	463b      	mov	r3, r7
 8001a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a9a:	6018      	str	r0, [r3, #0]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	8019      	strh	r1, [r3, #0]
      WriteData[0] = (AccBiasReg[0] >> 8) & 0xFF;
 8001aa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001aa4:	121b      	asrs	r3, r3, #8
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	703b      	strb	r3, [r7, #0]
      WriteData[1] = (AccBiasReg[0]) & 0xFF;
 8001aac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	707b      	strb	r3, [r7, #1]
      WriteData[2] = (AccBiasReg[1] >> 8) & 0xFF;
 8001ab4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ab8:	121b      	asrs	r3, r3, #8
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	70bb      	strb	r3, [r7, #2]
      WriteData[3] = (AccBiasReg[1]) & 0xFF;
 8001ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	70fb      	strb	r3, [r7, #3]
      WriteData[4] = (AccBiasReg[2] >> 8) & 0xFF;
 8001ac8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001acc:	121b      	asrs	r3, r3, #8
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	713b      	strb	r3, [r7, #4]
      WriteData[5] = (AccBiasReg[2]) & 0xFF;
 8001ad4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	717b      	strb	r3, [r7, #5]

      // Push accelerometer biases to hardware registers
      WriteByte(MpuI2cAddress, (uint8_t)XA_OFFSET_H, WriteData[0]);
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <WriteAccelOffset+0x1fc>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	783a      	ldrb	r2, [r7, #0]
 8001ae2:	2177      	movs	r1, #119	; 0x77
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f915 	bl	8001d14 <WriteByte>
      WriteByte(MpuI2cAddress,(uint8_t) XA_OFFSET_L, WriteData[1]);
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <WriteAccelOffset+0x1fc>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	787a      	ldrb	r2, [r7, #1]
 8001af0:	2178      	movs	r1, #120	; 0x78
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f90e 	bl	8001d14 <WriteByte>
      WriteByte(MpuI2cAddress,(uint8_t) YA_OFFSET_H, WriteData[2]);
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <WriteAccelOffset+0x1fc>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	78ba      	ldrb	r2, [r7, #2]
 8001afe:	217a      	movs	r1, #122	; 0x7a
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f907 	bl	8001d14 <WriteByte>
      WriteByte(MpuI2cAddress,(uint8_t) YA_OFFSET_L, WriteData[3]);
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <WriteAccelOffset+0x1fc>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	217b      	movs	r1, #123	; 0x7b
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f900 	bl	8001d14 <WriteByte>
      WriteByte(MpuI2cAddress,(uint8_t) ZA_OFFSET_H, WriteData[4]);
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <WriteAccelOffset+0x1fc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	793a      	ldrb	r2, [r7, #4]
 8001b1a:	217d      	movs	r1, #125	; 0x7d
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f8f9 	bl	8001d14 <WriteByte>
      WriteByte(MpuI2cAddress, (uint8_t)ZA_OFFSET_L, WriteData[5]);
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <WriteAccelOffset+0x1fc>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	797a      	ldrb	r2, [r7, #5]
 8001b28:	217e      	movs	r1, #126	; 0x7e
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f8f2 	bl	8001d14 <WriteByte>
  }
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	08005d58 	.word	0x08005d58
 8001b40:	20000164 	.word	0x20000164
 8001b44:	08005d60 	.word	0x08005d60

08001b48 <WriteGyroOffset>:

  void WriteGyroOffset()
  {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
	  // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	  uint8_t GyroOffsetData[6]= {0,0,0,0,0,0};
 8001b4e:	4a49      	ldr	r2, [pc, #292]	; (8001c74 <WriteGyroOffset+0x12c>)
 8001b50:	463b      	mov	r3, r7
 8001b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b56:	6018      	str	r0, [r3, #0]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	8019      	strh	r1, [r3, #0]
	  GyroOffsetData[0] = (-(int16_t)GyroBias[0] / 4 >> 8) & 0xFF;  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001b5c:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <WriteGyroOffset+0x130>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b66:	ee17 3a90 	vmov	r3, s15
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	da00      	bge.n	8001b72 <WriteGyroOffset+0x2a>
 8001b70:	3303      	adds	r3, #3
 8001b72:	109b      	asrs	r3, r3, #2
 8001b74:	425b      	negs	r3, r3
 8001b76:	121b      	asrs	r3, r3, #8
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	703b      	strb	r3, [r7, #0]
	  GyroOffsetData[1] = (-(int16_t)GyroBias[0] / 4) & 0xFF;       // Biases are additive, so change sign on calculated average gyro biases
 8001b7c:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <WriteGyroOffset+0x130>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b86:	ee17 3a90 	vmov	r3, s15
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da00      	bge.n	8001b92 <WriteGyroOffset+0x4a>
 8001b90:	3303      	adds	r3, #3
 8001b92:	109b      	asrs	r3, r3, #2
 8001b94:	425b      	negs	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	707b      	strb	r3, [r7, #1]
	  GyroOffsetData[2] = (-(int16_t)GyroBias[1] / 4 >> 8) & 0xFF;
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <WriteGyroOffset+0x130>)
 8001b9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 3a90 	vmov	r3, s15
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da00      	bge.n	8001bb0 <WriteGyroOffset+0x68>
 8001bae:	3303      	adds	r3, #3
 8001bb0:	109b      	asrs	r3, r3, #2
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	121b      	asrs	r3, r3, #8
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	70bb      	strb	r3, [r7, #2]
	  GyroOffsetData[3] = (-(int16_t)GyroBias[1] / 4) & 0xFF;
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <WriteGyroOffset+0x130>)
 8001bbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc4:	ee17 3a90 	vmov	r3, s15
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	da00      	bge.n	8001bd0 <WriteGyroOffset+0x88>
 8001bce:	3303      	adds	r3, #3
 8001bd0:	109b      	asrs	r3, r3, #2
 8001bd2:	425b      	negs	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	70fb      	strb	r3, [r7, #3]
	  GyroOffsetData[4] = (-(int16_t)GyroBias[2] / 4 >> 8) & 0xFF;
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <WriteGyroOffset+0x130>)
 8001bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be2:	ee17 3a90 	vmov	r3, s15
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da00      	bge.n	8001bee <WriteGyroOffset+0xa6>
 8001bec:	3303      	adds	r3, #3
 8001bee:	109b      	asrs	r3, r3, #2
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	121b      	asrs	r3, r3, #8
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	713b      	strb	r3, [r7, #4]
	  GyroOffsetData[5] = (-(int16_t)GyroBias[2] / 4) & 0xFF;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <WriteGyroOffset+0x130>)
 8001bfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c02:	ee17 3a90 	vmov	r3, s15
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da00      	bge.n	8001c0e <WriteGyroOffset+0xc6>
 8001c0c:	3303      	adds	r3, #3
 8001c0e:	109b      	asrs	r3, r3, #2
 8001c10:	425b      	negs	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	717b      	strb	r3, [r7, #5]

	  // Push gyro biases to hardware registers
	  WriteByte(MpuI2cAddress, (uint8_t)XG_OFFSET_H, GyroOffsetData[0]);
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <WriteGyroOffset+0x134>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	783a      	ldrb	r2, [r7, #0]
 8001c1c:	2113      	movs	r1, #19
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f878 	bl	8001d14 <WriteByte>
	  WriteByte(MpuI2cAddress, (uint8_t)XG_OFFSET_L, GyroOffsetData[1]);
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <WriteGyroOffset+0x134>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	787a      	ldrb	r2, [r7, #1]
 8001c2a:	2114      	movs	r1, #20
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f871 	bl	8001d14 <WriteByte>
	  WriteByte(MpuI2cAddress, (uint8_t)YG_OFFSET_H, GyroOffsetData[2]);
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <WriteGyroOffset+0x134>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	78ba      	ldrb	r2, [r7, #2]
 8001c38:	2115      	movs	r1, #21
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f86a 	bl	8001d14 <WriteByte>
	  WriteByte(MpuI2cAddress, (uint8_t)YG_OFFSET_L, GyroOffsetData[3]);
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <WriteGyroOffset+0x134>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	2116      	movs	r1, #22
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f863 	bl	8001d14 <WriteByte>
	  WriteByte(MpuI2cAddress, (uint8_t)ZG_OFFSET_H, GyroOffsetData[4]);
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <WriteGyroOffset+0x134>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	793a      	ldrb	r2, [r7, #4]
 8001c54:	2117      	movs	r1, #23
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f85c 	bl	8001d14 <WriteByte>
	  WriteByte(MpuI2cAddress, (uint8_t)ZG_OFFSET_L, GyroOffsetData[5]);
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <WriteGyroOffset+0x134>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	797a      	ldrb	r2, [r7, #5]
 8001c62:	2118      	movs	r1, #24
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f855 	bl	8001d14 <WriteByte>
  }
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	08005d60 	.word	0x08005d60
 8001c78:	20000170 	.word	0x20000170
 8001c7c:	20000008 	.word	0x20000008

08001c80 <IsConnectedMPU9250>:
int IsConnected() {
        HasConnected = IsConnectedMPU9250() && IsConnectedAK8963() ;
        return HasConnected;
    }

 int IsConnectedMPU9250() {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0



	 	uint8_t Reception;
		Reception =  ReadByte( MpuI2cAddress, (uint8_t) WHO_AM_I_MPU9250);
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <IsConnectedMPU9250+0x3c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2175      	movs	r1, #117	; 0x75
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f863 	bl	8001d58 <ReadByte>
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]

		if  ( (Reception==MPU9250_WHOAMI_DEFAULT_VALUE)
 8001c96:	2271      	movs	r2, #113	; 0x71
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <IsConnectedMPU9250+0x2e>
				||(Reception==MPU9255_WHOAMI_DEFAULT_VALUE)
 8001c9e:	2273      	movs	r2, #115	; 0x73
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d003      	beq.n	8001cae <IsConnectedMPU9250+0x2e>
				||(Reception==MPU6500_WHOAMI_DEFAULT_VALUE))
 8001ca6:	2270      	movs	r2, #112	; 0x70
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <IsConnectedMPU9250+0x32>
			return 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <IsConnectedMPU9250+0x34>
		else
			return 0;
 8001cb2:	2300      	movs	r3, #0




    }
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <IsConnectedAK8963>:

   int IsConnectedAK8963()
   {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af04      	add	r7, sp, #16
		uint8_t BypassEnable = 0x02;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 55, I2C_MEMADD_SIZE_8BIT, &BypassEnable,1,1000);
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	1dbb      	adds	r3, r7, #6
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2237      	movs	r2, #55	; 0x37
 8001cdc:	21d0      	movs	r1, #208	; 0xd0
 8001cde:	480b      	ldr	r0, [pc, #44]	; (8001d0c <IsConnectedAK8963+0x4c>)
 8001ce0:	f001 fae6 	bl	80032b0 <HAL_I2C_Mem_Write>

		uint8_t Reception;



		Reception=  ReadByte( MagI2cAddress, (uint8_t)AK8963_WHO_AM_I  );
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <IsConnectedAK8963+0x50>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f834 	bl	8001d58 <ReadByte>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]


		return(Reception==AK8963_WHOAMI_DEFAULT_VALUE);
 8001cf4:	2248      	movs	r2, #72	; 0x48
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3

    }
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200000bc 	.word	0x200000bc
 8001d10:	20000009 	.word	0x20000009

08001d14 <WriteByte>:



   void WriteByte(uint8_t DevAddress, uint8_t Register, uint8_t Data)

   {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	71bb      	strb	r3, [r7, #6]
 8001d22:	4613      	mov	r3, r2
 8001d24:	717b      	strb	r3, [r7, #5]
	   uint8_t D[2];
	   D[0]=Register;
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	733b      	strb	r3, [r7, #12]
	   D[1]=Data;
 8001d2a:	797b      	ldrb	r3, [r7, #5]
 8001d2c:	737b      	strb	r3, [r7, #13]
	   while ( HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)DevAddress,(uint8_t *)D  , 2 , 100  ) != HAL_OK);
 8001d2e:	bf00      	nop
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	b299      	uxth	r1, r3
 8001d34:	f107 020c 	add.w	r2, r7, #12
 8001d38:	2364      	movs	r3, #100	; 0x64
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <WriteByte+0x40>)
 8001d40:	f000 ff92 	bl	8002c68 <HAL_I2C_Master_Transmit>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f2      	bne.n	8001d30 <WriteByte+0x1c>


   }
 8001d4a:	bf00      	nop
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200000bc 	.word	0x200000bc

08001d58 <ReadByte>:

     uint8_t  ReadByte(uint8_t DevAddress, uint8_t Register ) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460a      	mov	r2, r1
 8001d62:	71fb      	strb	r3, [r7, #7]
 8001d64:	4613      	mov	r3, r2
 8001d66:	71bb      	strb	r3, [r7, #6]
         uint8_t Data = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]

      	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)DevAddress,&Register,1,1000) != HAL_OK);
 8001d6c:	bf00      	nop
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	b299      	uxth	r1, r3
 8001d72:	1dba      	adds	r2, r7, #6
 8001d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <ReadByte+0x58>)
 8001d7e:	f000 ff73 	bl	8002c68 <HAL_I2C_Master_Transmit>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f2      	bne.n	8001d6e <ReadByte+0x16>
      	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)DevAddress,&Data,1,1000) != HAL_OK);
 8001d88:	bf00      	nop
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	f107 020f 	add.w	r2, r7, #15
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <ReadByte+0x58>)
 8001d9c:	f001 f862 	bl	8002e64 <HAL_I2C_Master_Receive>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f1      	bne.n	8001d8a <ReadByte+0x32>


         return Data;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
     }
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200000bc 	.word	0x200000bc

08001db4 <ReadBytes>:

     void ReadBytes(uint8_t DevAddress, uint8_t Register, uint8_t Count, uint8_t* Destination)

     {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	71bb      	strb	r3, [r7, #6]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	717b      	strb	r3, [r7, #5]

         //uint8_t Register=AK8963_ASAX;

 	    while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) DevAddress,&Register,1,1000) != HAL_OK);
 8001dc8:	bf00      	nop
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	b299      	uxth	r1, r3
 8001dce:	1dba      	adds	r2, r7, #6
 8001dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <ReadBytes+0x58>)
 8001dda:	f000 ff45 	bl	8002c68 <HAL_I2C_Master_Transmit>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f2      	bne.n	8001dca <ReadBytes+0x16>
 	    while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) DevAddress, (uint8_t*)Destination,Count,1000) != HAL_OK);
 8001de4:	bf00      	nop
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	b299      	uxth	r1, r3
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <ReadBytes+0x58>)
 8001df8:	f001 f834 	bl	8002e64 <HAL_I2C_Master_Receive>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f1      	bne.n	8001de6 <ReadBytes+0x32>


         }
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200000bc 	.word	0x200000bc

08001e10 <Update>:
    void Update()
    {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0


         UpdateAccelGyro();
 8001e14:	f7ff fb70 	bl	80014f8 <UpdateAccelGyro>
         UpdateMag();
 8001e18:	f7ff fca2 	bl	8001760 <UpdateMag>



     }
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <SetAccBias>:
        float GetMagScaleX()  { return MagScale[0]; }
        float GetMagScaleY()  { return MagScale[1]; }
        float GetMagScaleZ()  { return MagScale[2]; }


        void SetAccBias( float x,  float y,  float z) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e2e:	ed87 1a01 	vstr	s2, [r7, #4]
            AccBias[0] = x;
 8001e32:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <SetAccBias+0x30>)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6013      	str	r3, [r2, #0]
            AccBias[1] = y;
 8001e38:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <SetAccBias+0x30>)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	6053      	str	r3, [r2, #4]
            AccBias[2] = z;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <SetAccBias+0x30>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6093      	str	r3, [r2, #8]
            WriteAccelOffset();
 8001e44:	f7ff fd7a 	bl	800193c <WriteAccelOffset>
        }
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000164 	.word	0x20000164

08001e54 <SetGyroBias>:
        void SetGyroBias( float x,  float y,  float z) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e62:	ed87 1a01 	vstr	s2, [r7, #4]
            GyroBias[0] = x;
 8001e66:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <SetGyroBias+0x30>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6013      	str	r3, [r2, #0]
            GyroBias[1] = y;
 8001e6c:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <SetGyroBias+0x30>)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	6053      	str	r3, [r2, #4]
            GyroBias[2] = z;
 8001e72:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <SetGyroBias+0x30>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6093      	str	r3, [r2, #8]
            WriteGyroOffset();
 8001e78:	f7ff fe66 	bl	8001b48 <WriteGyroOffset>
        }
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000170 	.word	0x20000170

08001e88 <SetMagBias>:
        void SetMagBias( float x,  float y,  float z) {
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e92:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e96:	ed87 1a01 	vstr	s2, [r7, #4]
            MagBias[0] = x;
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <SetMagBias+0x30>)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6013      	str	r3, [r2, #0]
            MagBias[1] = y;
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <SetMagBias+0x30>)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	6053      	str	r3, [r2, #4]
            MagBias[2] = z;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <SetMagBias+0x30>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6093      	str	r3, [r2, #8]
        }
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	20000188 	.word	0x20000188

08001ebc <SetMagScale>:
        void SetMagScale( float x,  float y,  float z) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ec6:	edc7 0a02 	vstr	s1, [r7, #8]
 8001eca:	ed87 1a01 	vstr	s2, [r7, #4]
            MagScale[0] = x;
 8001ece:	4a07      	ldr	r2, [pc, #28]	; (8001eec <SetMagScale+0x30>)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6013      	str	r3, [r2, #0]
            MagScale[1] = y;
 8001ed4:	4a05      	ldr	r2, [pc, #20]	; (8001eec <SetMagScale+0x30>)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	6053      	str	r3, [r2, #4]
            MagScale[2] = z;
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <SetMagScale+0x30>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6093      	str	r3, [r2, #8]
        }
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000194 	.word	0x20000194

08001ef0 <UpdateRpy>:
//void Mdgwick ()
//{
//
//}
//
void UpdateRpy() {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
	// These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	// Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	// applied in the correct order which for this configuration is yaw, pitch, and then roll.
	// For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.

	UpdateQuaternion(A,G,M,Q);
 8001ef6:	4b88      	ldr	r3, [pc, #544]	; (8002118 <UpdateRpy+0x228>)
 8001ef8:	4a88      	ldr	r2, [pc, #544]	; (800211c <UpdateRpy+0x22c>)
 8001efa:	4989      	ldr	r1, [pc, #548]	; (8002120 <UpdateRpy+0x230>)
 8001efc:	4889      	ldr	r0, [pc, #548]	; (8002124 <UpdateRpy+0x234>)
 8001efe:	f002 fdf9 	bl	8004af4 <UpdateQuaternion>
	float qw, qx,qy,qz ;
	qw=Q[0];
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <UpdateRpy+0x228>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
	qx=Q[1];
 8001f08:	4b83      	ldr	r3, [pc, #524]	; (8002118 <UpdateRpy+0x228>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	623b      	str	r3, [r7, #32]
	qy=Q[2];
 8001f0e:	4b82      	ldr	r3, [pc, #520]	; (8002118 <UpdateRpy+0x228>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61fb      	str	r3, [r7, #28]
	qz=Q[3];
 8001f14:	4b80      	ldr	r3, [pc, #512]	; (8002118 <UpdateRpy+0x228>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]

	float a12, a22, a31, a32, a33;  // rotation matrix coefficients for Euler angles and gravity components
	a12 = 2.0f * (qx * qy + qw * qz);
 8001f1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f26:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f3a:	edc7 7a05 	vstr	s15, [r7, #20]
	a22 = qw * qw + qx * qx - qy * qy - qz * qz;
 8001f3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f42:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f46:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6a:	edc7 7a04 	vstr	s15, [r7, #16]
	a31 = 2.0f * (qw * qx + qy * qz);
 8001f6e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f72:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f8e:	edc7 7a03 	vstr	s15, [r7, #12]
	a32 = 2.0f * (qx * qz - qw * qy);
 8001f92:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f96:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001fa2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fb2:	edc7 7a02 	vstr	s15, [r7, #8]
	a33 = qw * qw - qx * qx - qy * qy + qz * qz;
 8001fb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fca:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	edc7 7a01 	vstr	s15, [r7, #4]
	rpy[0] = atan2f(a31, a33);
 8001fe6:	edd7 0a01 	vldr	s1, [r7, #4]
 8001fea:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fee:	f003 fb69 	bl	80056c4 <atan2f>
 8001ff2:	eef0 7a40 	vmov.f32	s15, s0
 8001ff6:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <UpdateRpy+0x238>)
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
	rpy[1] = -asinf(a32);
 8001ffc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002000:	f003 fb34 	bl	800566c <asinf>
 8002004:	eef0 7a40 	vmov.f32	s15, s0
 8002008:	eef1 7a67 	vneg.f32	s15, s15
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <UpdateRpy+0x238>)
 800200e:	edc3 7a01 	vstr	s15, [r3, #4]
	rpy[2] = atan2f(a12, a22);
 8002012:	edd7 0a04 	vldr	s1, [r7, #16]
 8002016:	ed97 0a05 	vldr	s0, [r7, #20]
 800201a:	f003 fb53 	bl	80056c4 <atan2f>
 800201e:	eef0 7a40 	vmov.f32	s15, s0
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <UpdateRpy+0x238>)
 8002024:	edc3 7a02 	vstr	s15, [r3, #8]
	rpy[0] *= 180.0f / M_PI;
 8002028:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <UpdateRpy+0x238>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa2f 	bl	8000490 <__aeabi_f2d>
 8002032:	a337      	add	r3, pc, #220	; (adr r3, 8002110 <UpdateRpy+0x220>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe fa82 	bl	8000540 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fd2c 	bl	8000aa0 <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	4a37      	ldr	r2, [pc, #220]	; (8002128 <UpdateRpy+0x238>)
 800204c:	6013      	str	r3, [r2, #0]
	rpy[1] *= 180.0f / M_PI;
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <UpdateRpy+0x238>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa1c 	bl	8000490 <__aeabi_f2d>
 8002058:	a32d      	add	r3, pc, #180	; (adr r3, 8002110 <UpdateRpy+0x220>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe fa6f 	bl	8000540 <__aeabi_dmul>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fd19 	bl	8000aa0 <__aeabi_d2f>
 800206e:	4603      	mov	r3, r0
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <UpdateRpy+0x238>)
 8002072:	6053      	str	r3, [r2, #4]
	rpy[2] *= 180.0f / M_PI;
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <UpdateRpy+0x238>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa09 	bl	8000490 <__aeabi_f2d>
 800207e:	a324      	add	r3, pc, #144	; (adr r3, 8002110 <UpdateRpy+0x220>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe fa5c 	bl	8000540 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fd06 	bl	8000aa0 <__aeabi_d2f>
 8002094:	4603      	mov	r3, r0
 8002096:	4a24      	ldr	r2, [pc, #144]	; (8002128 <UpdateRpy+0x238>)
 8002098:	6093      	str	r3, [r2, #8]
	rpy[2] += MagneticDeclination;
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <UpdateRpy+0x238>)
 800209c:	ed93 7a02 	vldr	s14, [r3, #8]
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <UpdateRpy+0x23c>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <UpdateRpy+0x238>)
 80020ac:	edc3 7a02 	vstr	s15, [r3, #8]
	if (rpy[2] >= +180.f)
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <UpdateRpy+0x238>)
 80020b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80020b6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002130 <UpdateRpy+0x240>
 80020ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c2:	db0a      	blt.n	80020da <UpdateRpy+0x1ea>
		rpy[2] -= 360.f;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <UpdateRpy+0x238>)
 80020c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80020ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002134 <UpdateRpy+0x244>
 80020ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <UpdateRpy+0x238>)
 80020d4:	edc3 7a02 	vstr	s15, [r3, #8]
		rpy[2] += 360.f;
	/*
        lin_acc[0] = a[0] + a31;
        lin_acc[1] = a[1] + a32;
        lin_acc[2] = a[2] - a33;*/
    }
 80020d8:	e014      	b.n	8002104 <UpdateRpy+0x214>
	else if (rpy[2] < -180.f)
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <UpdateRpy+0x238>)
 80020dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80020e0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002138 <UpdateRpy+0x248>
 80020e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	d400      	bmi.n	80020f0 <UpdateRpy+0x200>
    }
 80020ee:	e009      	b.n	8002104 <UpdateRpy+0x214>
		rpy[2] += 360.f;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <UpdateRpy+0x238>)
 80020f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80020f6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002134 <UpdateRpy+0x244>
 80020fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <UpdateRpy+0x238>)
 8002100:	edc3 7a02 	vstr	s15, [r3, #8]
    }
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	; 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	f3af 8000 	nop.w
 8002110:	1a63c1f8 	.word	0x1a63c1f8
 8002114:	404ca5dc 	.word	0x404ca5dc
 8002118:	20000010 	.word	0x20000010
 800211c:	200001b8 	.word	0x200001b8
 8002120:	200001ac 	.word	0x200001ac
 8002124:	200001a0 	.word	0x200001a0
 8002128:	200001cc 	.word	0x200001cc
 800212c:	2000000c 	.word	0x2000000c
 8002130:	43340000 	.word	0x43340000
 8002134:	43b40000 	.word	0x43b40000
 8002138:	c3340000 	.word	0xc3340000

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002144:	e7fe      	b.n	8002144 <Error_Handler+0x8>
	...

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_MspInit+0x4c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_MspInit+0x4c>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_MspInit+0x4c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_MspInit+0x4c>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_I2C_MspInit+0x84>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12b      	bne.n	8002212 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_I2C_MspInit+0x88>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_I2C_MspInit+0x88>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_I2C_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021d6:	23c0      	movs	r3, #192	; 0xc0
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021da:	2312      	movs	r3, #18
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e6:	2304      	movs	r3, #4
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	480c      	ldr	r0, [pc, #48]	; (8002224 <HAL_I2C_MspInit+0x8c>)
 80021f2:	f000 fa59 	bl	80026a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_I2C_MspInit+0x88>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_I2C_MspInit+0x88>)
 8002200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_I2C_MspInit+0x88>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40005400 	.word	0x40005400
 8002220:	40023800 	.word	0x40023800
 8002224:	40020400 	.word	0x40020400

08002228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <HAL_TIM_Base_MspInit+0x48>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d115      	bne.n	8002266 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_TIM_Base_MspInit+0x4c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <HAL_TIM_Base_MspInit+0x4c>)
 8002244:	f043 0320 	orr.w	r3, r3, #32
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_TIM_Base_MspInit+0x4c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2037      	movs	r0, #55	; 0x37
 800225c:	f000 f9ed 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002260:	2037      	movs	r0, #55	; 0x37
 8002262:	f000 fa06 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40001400 	.word	0x40001400
 8002274:	40023800 	.word	0x40023800

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800227c:	e7fe      	b.n	800227c <NMI_Handler+0x4>

0800227e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <HardFault_Handler+0x4>

08002284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <MemManage_Handler+0x4>

0800228a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <BusFault_Handler+0x4>

08002290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <UsageFault_Handler+0x4>

08002296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c4:	f000 f89a 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM7_IRQHandler+0x10>)
 80022d2:	f002 f9af 	bl	8004634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000110 	.word	0x20000110

080022e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <SystemInit+0x20>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <SystemInit+0x20>)
 80022ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800233c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002308:	480d      	ldr	r0, [pc, #52]	; (8002340 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800230a:	490e      	ldr	r1, [pc, #56]	; (8002344 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800230c:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002320:	4c0b      	ldr	r4, [pc, #44]	; (8002350 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800232e:	f7ff ffd7 	bl	80022e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002332:	f003 f943 	bl	80055bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002336:	f7fe fd95 	bl	8000e64 <main>
  bx  lr    
 800233a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800233c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002348:	08005ddc 	.word	0x08005ddc
  ldr r2, =_sbss
 800234c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002350:	200001f0 	.word	0x200001f0

08002354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC_IRQHandler>
	...

08002358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <HAL_Init+0x40>)
 8002362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_Init+0x40>)
 800236e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_Init+0x40>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002380:	2003      	movs	r0, #3
 8002382:	f000 f94f 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002386:	200f      	movs	r0, #15
 8002388:	f000 f808 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800238c:	f7ff fedc 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x54>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x58>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f967 	bl	800268e <HAL_SYSTICK_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00e      	b.n	80023e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d80a      	bhi.n	80023e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f000 f92f 	bl	800263a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_InitTick+0x5c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000020 	.word	0x20000020
 80023f4:	20000028 	.word	0x20000028
 80023f8:	20000024 	.word	0x20000024

080023fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x20>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x24>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_IncTick+0x24>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000028 	.word	0x20000028
 8002420:	200001dc 	.word	0x200001dc

08002424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return uwTick;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_GetTick+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200001dc 	.word	0x200001dc

0800243c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff ffee 	bl	8002424 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d005      	beq.n	8002462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_Delay+0x44>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002462:	bf00      	nop
 8002464:	f7ff ffde 	bl	8002424 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d8f7      	bhi.n	8002464 <HAL_Delay+0x28>
  {
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000028 	.word	0x20000028

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <__NVIC_EnableIRQ+0x38>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f0:	d301      	bcc.n	80025f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00f      	b.n	8002616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <SysTick_Config+0x40>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fe:	210f      	movs	r1, #15
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f7ff ff8e 	bl	8002524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <SysTick_Config+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <SysTick_Config+0x40>)
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010

08002624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff29 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800264c:	f7ff ff3e 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ff8e 	bl	8002578 <NVIC_EncodePriority>
 800265c:	4602      	mov	r2, r0
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff5d 	bl	8002524 <__NVIC_SetPriority>
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff31 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffa2 	bl	80025e0 <SysTick_Config>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e16b      	b.n	800299c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	f040 815a 	bne.w	8002996 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d005      	beq.n	80026fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d130      	bne.n	800275c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2203      	movs	r2, #3
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0201 	and.w	r2, r3, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b03      	cmp	r3, #3
 8002766:	d017      	beq.n	8002798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d123      	bne.n	80027ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3208      	adds	r2, #8
 80027ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0203 	and.w	r2, r3, #3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80b4 	beq.w	8002996 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a5f      	ldr	r2, [pc, #380]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <HAL_GPIO_Init+0x310>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_GPIO_Init+0x314>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02b      	beq.n	80028ce <HAL_GPIO_Init+0x226>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a51      	ldr	r2, [pc, #324]	; (80029c0 <HAL_GPIO_Init+0x318>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d025      	beq.n	80028ca <HAL_GPIO_Init+0x222>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_GPIO_Init+0x31c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01f      	beq.n	80028c6 <HAL_GPIO_Init+0x21e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4f      	ldr	r2, [pc, #316]	; (80029c8 <HAL_GPIO_Init+0x320>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d019      	beq.n	80028c2 <HAL_GPIO_Init+0x21a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4e      	ldr	r2, [pc, #312]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_GPIO_Init+0x216>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4d      	ldr	r2, [pc, #308]	; (80029d0 <HAL_GPIO_Init+0x328>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00d      	beq.n	80028ba <HAL_GPIO_Init+0x212>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <HAL_GPIO_Init+0x32c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x20e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4b      	ldr	r2, [pc, #300]	; (80029d8 <HAL_GPIO_Init+0x330>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_GPIO_Init+0x20a>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e00e      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028b2:	2308      	movs	r3, #8
 80028b4:	e00c      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028b6:	2306      	movs	r3, #6
 80028b8:	e00a      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028ba:	2305      	movs	r3, #5
 80028bc:	e008      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028be:	2304      	movs	r3, #4
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e004      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028ce:	2300      	movs	r3, #0
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f002 0203 	and.w	r2, r2, #3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4093      	lsls	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e0:	4935      	ldr	r1, [pc, #212]	; (80029b8 <HAL_GPIO_Init+0x310>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_GPIO_Init+0x334>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002912:	4a32      	ldr	r2, [pc, #200]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_GPIO_Init+0x334>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_GPIO_Init+0x334>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002966:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_GPIO_Init+0x334>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002990:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f ae90 	bls.w	80026c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020c00 	.word	0x40020c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40021400 	.word	0x40021400
 80029d4:	40021800 	.word	0x40021800
 80029d8:	40021c00 	.word	0x40021c00
 80029dc:	40013c00 	.word	0x40013c00

080029e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e12b      	b.n	8002c4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fbc6 	bl	8002198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	; 0x24
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a44:	f001 fd22 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8002a48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a81      	ldr	r2, [pc, #516]	; (8002c54 <HAL_I2C_Init+0x274>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d807      	bhi.n	8002a64 <HAL_I2C_Init+0x84>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a80      	ldr	r2, [pc, #512]	; (8002c58 <HAL_I2C_Init+0x278>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bf94      	ite	ls
 8002a5c:	2301      	movls	r3, #1
 8002a5e:	2300      	movhi	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e006      	b.n	8002a72 <HAL_I2C_Init+0x92>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a7d      	ldr	r2, [pc, #500]	; (8002c5c <HAL_I2C_Init+0x27c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	bf94      	ite	ls
 8002a6c:	2301      	movls	r3, #1
 8002a6e:	2300      	movhi	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0e7      	b.n	8002c4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a78      	ldr	r2, [pc, #480]	; (8002c60 <HAL_I2C_Init+0x280>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0c9b      	lsrs	r3, r3, #18
 8002a84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a6a      	ldr	r2, [pc, #424]	; (8002c54 <HAL_I2C_Init+0x274>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d802      	bhi.n	8002ab4 <HAL_I2C_Init+0xd4>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	e009      	b.n	8002ac8 <HAL_I2C_Init+0xe8>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	4a69      	ldr	r2, [pc, #420]	; (8002c64 <HAL_I2C_Init+0x284>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ada:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	495c      	ldr	r1, [pc, #368]	; (8002c54 <HAL_I2C_Init+0x274>)
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	d819      	bhi.n	8002b1c <HAL_I2C_Init+0x13c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e59      	subs	r1, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af6:	1c59      	adds	r1, r3, #1
 8002af8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002afc:	400b      	ands	r3, r1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_I2C_Init+0x138>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1e59      	subs	r1, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	e051      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	e04f      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d111      	bne.n	8002b48 <HAL_I2C_Init+0x168>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e58      	subs	r0, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	440b      	add	r3, r1
 8002b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e012      	b.n	8002b6e <HAL_I2C_Init+0x18e>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Init+0x196>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e022      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10e      	bne.n	8002b9c <HAL_I2C_Init+0x1bc>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1e58      	subs	r0, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	440b      	add	r3, r1
 8002b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9a:	e00f      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1e58      	subs	r0, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	0099      	lsls	r1, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	6809      	ldr	r1, [r1, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6911      	ldr	r1, [r2, #16]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68d2      	ldr	r2, [r2, #12]
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	000186a0 	.word	0x000186a0
 8002c58:	001e847f 	.word	0x001e847f
 8002c5c:	003d08ff 	.word	0x003d08ff
 8002c60:	431bde83 	.word	0x431bde83
 8002c64:	10624dd3 	.word	0x10624dd3

08002c68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	461a      	mov	r2, r3
 8002c74:	460b      	mov	r3, r1
 8002c76:	817b      	strh	r3, [r7, #10]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7ff fbd2 	bl	8002424 <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	f040 80e0 	bne.w	8002e50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2319      	movs	r3, #25
 8002c96:	2201      	movs	r2, #1
 8002c98:	4970      	ldr	r1, [pc, #448]	; (8002e5c <HAL_I2C_Master_Transmit+0x1f4>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fde8 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e0d3      	b.n	8002e52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_I2C_Master_Transmit+0x50>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e0cc      	b.n	8002e52 <HAL_I2C_Master_Transmit+0x1ea>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d007      	beq.n	8002cde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2221      	movs	r2, #33	; 0x21
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	893a      	ldrh	r2, [r7, #8]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d20:	8979      	ldrh	r1, [r7, #10]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6a3a      	ldr	r2, [r7, #32]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fbbc 	bl	80034a4 <I2C_MasterRequestWrite>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e08d      	b.n	8002e52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d4c:	e066      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	6a39      	ldr	r1, [r7, #32]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fe62 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d107      	bne.n	8002d76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06b      	b.n	8002e52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d11b      	bne.n	8002df0 <HAL_I2C_Master_Transmit+0x188>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d017      	beq.n	8002df0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	6a39      	ldr	r1, [r7, #32]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fe52 	bl	8003a9e <I2C_WaitOnBTFFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d107      	bne.n	8002e18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e01a      	b.n	8002e52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d194      	bne.n	8002d4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	00100002 	.word	0x00100002
 8002e60:	ffff0000 	.word	0xffff0000

08002e64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08c      	sub	sp, #48	; 0x30
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	460b      	mov	r3, r1
 8002e72:	817b      	strh	r3, [r7, #10]
 8002e74:	4613      	mov	r3, r2
 8002e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff fad4 	bl	8002424 <HAL_GetTick>
 8002e7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	f040 820b 	bne.w	80032a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2319      	movs	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	497c      	ldr	r1, [pc, #496]	; (8003088 <HAL_I2C_Master_Receive+0x224>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fcea 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e1fe      	b.n	80032a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_I2C_Master_Receive+0x50>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e1f7      	b.n	80032a4 <HAL_I2C_Master_Receive+0x440>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d007      	beq.n	8002eda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2222      	movs	r2, #34	; 0x22
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	893a      	ldrh	r2, [r7, #8]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a5c      	ldr	r2, [pc, #368]	; (800308c <HAL_I2C_Master_Receive+0x228>)
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fb40 	bl	80035a8 <I2C_MasterRequestRead>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e1b8      	b.n	80032a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d113      	bne.n	8002f62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	623b      	str	r3, [r7, #32]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e18c      	b.n	800327c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d11b      	bne.n	8002fa2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e16c      	b.n	800327c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d11b      	bne.n	8002fe2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	e14c      	b.n	800327c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003008:	e138      	b.n	800327c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	2b03      	cmp	r3, #3
 8003010:	f200 80f1 	bhi.w	80031f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	2b01      	cmp	r3, #1
 800301a:	d123      	bne.n	8003064 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fd7d 	bl	8003b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e139      	b.n	80032a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003062:	e10b      	b.n	800327c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	2b02      	cmp	r3, #2
 800306a:	d14e      	bne.n	800310a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	2200      	movs	r2, #0
 8003074:	4906      	ldr	r1, [pc, #24]	; (8003090 <HAL_I2C_Master_Receive+0x22c>)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fbfa 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e10e      	b.n	80032a4 <HAL_I2C_Master_Receive+0x440>
 8003086:	bf00      	nop
 8003088:	00100002 	.word	0x00100002
 800308c:	ffff0000 	.word	0xffff0000
 8003090:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003108:	e0b8      	b.n	800327c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	2200      	movs	r2, #0
 8003112:	4966      	ldr	r1, [pc, #408]	; (80032ac <HAL_I2C_Master_Receive+0x448>)
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fbab 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0bf      	b.n	80032a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	2200      	movs	r2, #0
 800316e:	494f      	ldr	r1, [pc, #316]	; (80032ac <HAL_I2C_Master_Receive+0x448>)
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fb7d 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e091      	b.n	80032a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031f4:	e042      	b.n	800327c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fc90 	bl	8003b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e04c      	b.n	80032a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d118      	bne.n	800327c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	f47f aec2 	bne.w	800300a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3728      	adds	r7, #40	; 0x28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	00010004 	.word	0x00010004

080032b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	817b      	strh	r3, [r7, #10]
 80032c2:	460b      	mov	r3, r1
 80032c4:	813b      	strh	r3, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ca:	f7ff f8ab 	bl	8002424 <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	f040 80d9 	bne.w	8003490 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	2319      	movs	r3, #25
 80032e4:	2201      	movs	r2, #1
 80032e6:	496d      	ldr	r1, [pc, #436]	; (800349c <HAL_I2C_Mem_Write+0x1ec>)
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fac1 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
 80032f6:	e0cc      	b.n	8003492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_I2C_Mem_Write+0x56>
 8003302:	2302      	movs	r3, #2
 8003304:	e0c5      	b.n	8003492 <HAL_I2C_Mem_Write+0x1e2>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d007      	beq.n	800332c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2221      	movs	r2, #33	; 0x21
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2240      	movs	r2, #64	; 0x40
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a3a      	ldr	r2, [r7, #32]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a4d      	ldr	r2, [pc, #308]	; (80034a0 <HAL_I2C_Mem_Write+0x1f0>)
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800336e:	88f8      	ldrh	r0, [r7, #6]
 8003370:	893a      	ldrh	r2, [r7, #8]
 8003372:	8979      	ldrh	r1, [r7, #10]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4603      	mov	r3, r0
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f9e0 	bl	8003744 <I2C_RequestMemoryWrite>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d052      	beq.n	8003430 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e081      	b.n	8003492 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fb42 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d107      	bne.n	80033b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e06b      	b.n	8003492 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d11b      	bne.n	8003430 <HAL_I2C_Mem_Write+0x180>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d017      	beq.n	8003430 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1aa      	bne.n	800338e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fb2e 	bl	8003a9e <I2C_WaitOnBTFFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	2b04      	cmp	r3, #4
 800344e:	d107      	bne.n	8003460 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e016      	b.n	8003492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e000      	b.n	8003492 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003490:	2302      	movs	r3, #2
  }
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	00100002 	.word	0x00100002
 80034a0:	ffff0000 	.word	0xffff0000

080034a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	460b      	mov	r3, r1
 80034b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d006      	beq.n	80034ce <I2C_MasterRequestWrite+0x2a>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d003      	beq.n	80034ce <I2C_MasterRequestWrite+0x2a>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034cc:	d108      	bne.n	80034e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e00b      	b.n	80034f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	2b12      	cmp	r3, #18
 80034e6:	d107      	bne.n	80034f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f9b3 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351e:	d103      	bne.n	8003528 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e035      	b.n	8003598 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003534:	d108      	bne.n	8003548 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003544:	611a      	str	r2, [r3, #16]
 8003546:	e01b      	b.n	8003580 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003548:	897b      	ldrh	r3, [r7, #10]
 800354a:	11db      	asrs	r3, r3, #7
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f003 0306 	and.w	r3, r3, #6
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f063 030f 	orn	r3, r3, #15
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	490e      	ldr	r1, [pc, #56]	; (80035a0 <I2C_MasterRequestWrite+0xfc>)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f9d9 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e010      	b.n	8003598 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <I2C_MasterRequestWrite+0x100>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f9c9 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	00010008 	.word	0x00010008
 80035a4:	00010002 	.word	0x00010002

080035a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	460b      	mov	r3, r1
 80035b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d006      	beq.n	80035e2 <I2C_MasterRequestRead+0x3a>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d003      	beq.n	80035e2 <I2C_MasterRequestRead+0x3a>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e0:	d108      	bne.n	80035f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e00b      	b.n	800360c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	2b11      	cmp	r3, #17
 80035fa:	d107      	bne.n	800360c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f929 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003632:	d103      	bne.n	800363c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800363a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e079      	b.n	8003734 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003648:	d108      	bne.n	800365c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]
 800365a:	e05f      	b.n	800371c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800365c:	897b      	ldrh	r3, [r7, #10]
 800365e:	11db      	asrs	r3, r3, #7
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f003 0306 	and.w	r3, r3, #6
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f063 030f 	orn	r3, r3, #15
 800366c:	b2da      	uxtb	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4930      	ldr	r1, [pc, #192]	; (800373c <I2C_MasterRequestRead+0x194>)
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f94f 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e054      	b.n	8003734 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4929      	ldr	r1, [pc, #164]	; (8003740 <I2C_MasterRequestRead+0x198>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f93f 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e044      	b.n	8003734 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f8c7 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f6:	d103      	bne.n	8003700 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e017      	b.n	8003734 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003704:	897b      	ldrh	r3, [r7, #10]
 8003706:	11db      	asrs	r3, r3, #7
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 0306 	and.w	r3, r3, #6
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f063 030e 	orn	r3, r3, #14
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4907      	ldr	r1, [pc, #28]	; (8003740 <I2C_MasterRequestRead+0x198>)
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f8fb 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	00010008 	.word	0x00010008
 8003740:	00010002 	.word	0x00010002

08003744 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	4608      	mov	r0, r1
 800374e:	4611      	mov	r1, r2
 8003750:	461a      	mov	r2, r3
 8003752:	4603      	mov	r3, r0
 8003754:	817b      	strh	r3, [r7, #10]
 8003756:	460b      	mov	r3, r1
 8003758:	813b      	strh	r3, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800376c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	2200      	movs	r2, #0
 8003776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f878 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003794:	d103      	bne.n	800379e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e05f      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	492d      	ldr	r1, [pc, #180]	; (800386c <I2C_RequestMemoryWrite+0x128>)
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f8b0 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e04c      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e0:	6a39      	ldr	r1, [r7, #32]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f91a 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d107      	bne.n	8003806 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e02b      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003810:	893b      	ldrh	r3, [r7, #8]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	e021      	b.n	8003860 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800381c:	893b      	ldrh	r3, [r7, #8]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	b29b      	uxth	r3, r3
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	6a39      	ldr	r1, [r7, #32]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f8f4 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b04      	cmp	r3, #4
 8003840:	d107      	bne.n	8003852 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e005      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003856:	893b      	ldrh	r3, [r7, #8]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	00010002 	.word	0x00010002

08003870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003880:	e025      	b.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d021      	beq.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fe fdcb 	bl	8002424 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d116      	bne.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e023      	b.n	8003916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d10d      	bne.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4013      	ands	r3, r2
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	e00c      	b.n	800390e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	43da      	mvns	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	429a      	cmp	r2, r3
 8003912:	d0b6      	beq.n	8003882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800392c:	e051      	b.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393c:	d123      	bne.n	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e046      	b.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d021      	beq.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe fd49 	bl	8002424 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e020      	b.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10c      	bne.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e00b      	b.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	43da      	mvns	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d18d      	bne.n	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a28:	e02d      	b.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f8ce 	bl	8003bcc <I2C_IsAcknowledgeFailed>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e02d      	b.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d021      	beq.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fe fcef 	bl	8002424 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d116      	bne.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e007      	b.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d1ca      	bne.n	8003a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aaa:	e02d      	b.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f88d 	bl	8003bcc <I2C_IsAcknowledgeFailed>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e02d      	b.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d021      	beq.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac4:	f7fe fcae 	bl	8002424 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e007      	b.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d1ca      	bne.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b2c:	e042      	b.n	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d119      	bne.n	8003b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0210 	mvn.w	r2, #16
 8003b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e029      	b.n	8003bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7fe fc58 	bl	8002424 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d1b5      	bne.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d11b      	bne.n	8003c1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0204 	orr.w	r2, r3, #4
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e267      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d075      	beq.n	8003d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4a:	4b88      	ldr	r3, [pc, #544]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d00c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c56:	4b85      	ldr	r3, [pc, #532]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d112      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c62:	4b82      	ldr	r3, [pc, #520]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6e:	d10b      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c70:	4b7e      	ldr	r3, [pc, #504]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05b      	beq.n	8003d34 <HAL_RCC_OscConfig+0x108>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d157      	bne.n	8003d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e242      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x74>
 8003c92:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a75      	ldr	r2, [pc, #468]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e01d      	b.n	8003cdc <HAL_RCC_OscConfig+0xb0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x98>
 8003caa:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6f      	ldr	r2, [pc, #444]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b6d      	ldr	r3, [pc, #436]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a6c      	ldr	r2, [pc, #432]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0xb0>
 8003cc4:	4b69      	ldr	r3, [pc, #420]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a68      	ldr	r2, [pc, #416]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b66      	ldr	r3, [pc, #408]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a65      	ldr	r2, [pc, #404]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fb9e 	bl	8002424 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fe fb9a 	bl	8002424 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e207      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b5b      	ldr	r3, [pc, #364]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0xc0>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fb8a 	bl	8002424 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fe fb86 	bl	8002424 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1f3      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0xe8>
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d063      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d42:	4b4a      	ldr	r3, [pc, #296]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d11c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5a:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d116      	bne.n	8003d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_RCC_OscConfig+0x152>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e1c7      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7e:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4937      	ldr	r1, [pc, #220]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	e03a      	b.n	8003e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d9c:	4b34      	ldr	r3, [pc, #208]	; (8003e70 <HAL_RCC_OscConfig+0x244>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fe fb3f 	bl	8002424 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003daa:	f7fe fb3b 	bl	8002424 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1a8      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4925      	ldr	r1, [pc, #148]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]
 8003ddc:	e015      	b.n	8003e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_RCC_OscConfig+0x244>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fb1e 	bl	8002424 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dec:	f7fe fb1a 	bl	8002424 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e187      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d036      	beq.n	8003e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_RCC_OscConfig+0x248>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fe fafe 	bl	8002424 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2c:	f7fe fafa 	bl	8002424 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e167      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x200>
 8003e4a:	e01b      	b.n	8003e84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_OscConfig+0x248>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e52:	f7fe fae7 	bl	8002424 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	e00e      	b.n	8003e78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5a:	f7fe fae3 	bl	8002424 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d907      	bls.n	8003e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e150      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	42470000 	.word	0x42470000
 8003e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b88      	ldr	r3, [pc, #544]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ea      	bne.n	8003e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8097 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e96:	4b81      	ldr	r3, [pc, #516]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b7d      	ldr	r3, [pc, #500]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a7c      	ldr	r2, [pc, #496]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b7a      	ldr	r3, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b77      	ldr	r3, [pc, #476]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d118      	bne.n	8003f00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ece:	4b74      	ldr	r3, [pc, #464]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a73      	ldr	r2, [pc, #460]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eda:	f7fe faa3 	bl	8002424 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee2:	f7fe fa9f 	bl	8002424 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e10c      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	4b6a      	ldr	r3, [pc, #424]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x2ea>
 8003f08:	4b64      	ldr	r3, [pc, #400]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a63      	ldr	r2, [pc, #396]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	e01c      	b.n	8003f50 <HAL_RCC_OscConfig+0x324>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x30c>
 8003f1e:	4b5f      	ldr	r3, [pc, #380]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4a5e      	ldr	r2, [pc, #376]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2a:	4b5c      	ldr	r3, [pc, #368]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5b      	ldr	r2, [pc, #364]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0x324>
 8003f38:	4b58      	ldr	r3, [pc, #352]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a57      	ldr	r2, [pc, #348]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	4b55      	ldr	r3, [pc, #340]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	4a54      	ldr	r2, [pc, #336]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f4a:	f023 0304 	bic.w	r3, r3, #4
 8003f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fe fa64 	bl	8002424 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fe fa60 	bl	8002424 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e0cb      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f76:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ee      	beq.n	8003f60 <HAL_RCC_OscConfig+0x334>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f84:	f7fe fa4e 	bl	8002424 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fe fa4a 	bl	8002424 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0b5      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa2:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1ee      	bne.n	8003f8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	4a38      	ldr	r2, [pc, #224]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a1 	beq.w	800410c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fca:	4b34      	ldr	r3, [pc, #208]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d05c      	beq.n	8004090 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d141      	bne.n	8004062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_RCC_OscConfig+0x478>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fa1e 	bl	8002424 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fe fa1a 	bl	8002424 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e087      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69da      	ldr	r2, [r3, #28]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	3b01      	subs	r3, #1
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	491b      	ldr	r1, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_RCC_OscConfig+0x478>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fe f9f3 	bl	8002424 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004042:	f7fe f9ef 	bl	8002424 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e05c      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x416>
 8004060:	e054      	b.n	800410c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_RCC_OscConfig+0x478>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fe f9dc 	bl	8002424 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004070:	f7fe f9d8 	bl	8002424 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e045      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x444>
 800408e:	e03d      	b.n	800410c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e038      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
 800409c:	40023800 	.word	0x40023800
 80040a0:	40007000 	.word	0x40007000
 80040a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_OscConfig+0x4ec>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d028      	beq.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d121      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d11a      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040d8:	4013      	ands	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d111      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	085b      	lsrs	r3, r3, #1
 80040f0:	3b01      	subs	r3, #1
 80040f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800

0800411c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0cc      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b68      	ldr	r3, [pc, #416]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d90c      	bls.n	8004158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b63      	ldr	r3, [pc, #396]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0b8      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004170:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800417a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004188:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a52      	ldr	r2, [pc, #328]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004194:	4b50      	ldr	r3, [pc, #320]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	494d      	ldr	r1, [pc, #308]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d044      	beq.n	800423c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ba:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d119      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e07f      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d003      	beq.n	80041da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06f      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ea:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e067      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fa:	4b37      	ldr	r3, [pc, #220]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4934      	ldr	r1, [pc, #208]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800420c:	f7fe f90a 	bl	8002424 <HAL_GetTick>
 8004210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fe f906 	bl	8002424 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e04f      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 020c 	and.w	r2, r3, #12
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	429a      	cmp	r2, r3
 800423a:	d1eb      	bne.n	8004214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d20c      	bcs.n	8004264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e032      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4916      	ldr	r1, [pc, #88]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	490e      	ldr	r1, [pc, #56]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042a2:	f000 f821 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80042a6:	4602      	mov	r2, r0
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	091b      	lsrs	r3, r3, #4
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	490a      	ldr	r1, [pc, #40]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	5ccb      	ldrb	r3, [r1, r3]
 80042b6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ba:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042be:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe f86a 	bl	800239c <HAL_InitTick>

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023c00 	.word	0x40023c00
 80042d8:	40023800 	.word	0x40023800
 80042dc:	08005d78 	.word	0x08005d78
 80042e0:	20000020 	.word	0x20000020
 80042e4:	20000024 	.word	0x20000024

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042ec:	b090      	sub	sp, #64	; 0x40
 80042ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
 80042f4:	2300      	movs	r3, #0
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f8:	2300      	movs	r3, #0
 80042fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004300:	4b59      	ldr	r3, [pc, #356]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b08      	cmp	r3, #8
 800430a:	d00d      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x40>
 800430c:	2b08      	cmp	r3, #8
 800430e:	f200 80a1 	bhi.w	8004454 <HAL_RCC_GetSysClockFreq+0x16c>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x34>
 8004316:	2b04      	cmp	r3, #4
 8004318:	d003      	beq.n	8004322 <HAL_RCC_GetSysClockFreq+0x3a>
 800431a:	e09b      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_GetSysClockFreq+0x184>)
 800431e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004320:	e09b      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004322:	4b53      	ldr	r3, [pc, #332]	; (8004470 <HAL_RCC_GetSysClockFreq+0x188>)
 8004324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004326:	e098      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004328:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004330:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004332:	4b4d      	ldr	r3, [pc, #308]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d028      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433e:	4b4a      	ldr	r3, [pc, #296]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	099b      	lsrs	r3, r3, #6
 8004344:	2200      	movs	r2, #0
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	627a      	str	r2, [r7, #36]	; 0x24
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004350:	2100      	movs	r1, #0
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCC_GetSysClockFreq+0x188>)
 8004354:	fb03 f201 	mul.w	r2, r3, r1
 8004358:	2300      	movs	r3, #0
 800435a:	fb00 f303 	mul.w	r3, r0, r3
 800435e:	4413      	add	r3, r2
 8004360:	4a43      	ldr	r2, [pc, #268]	; (8004470 <HAL_RCC_GetSysClockFreq+0x188>)
 8004362:	fba0 1202 	umull	r1, r2, r0, r2
 8004366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004368:	460a      	mov	r2, r1
 800436a:	62ba      	str	r2, [r7, #40]	; 0x28
 800436c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436e:	4413      	add	r3, r2
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	2200      	movs	r2, #0
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	61fa      	str	r2, [r7, #28]
 800437a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004382:	f7fc fbdd 	bl	8000b40 <__aeabi_uldivmod>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4613      	mov	r3, r2
 800438c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438e:	e053      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004390:	4b35      	ldr	r3, [pc, #212]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	099b      	lsrs	r3, r3, #6
 8004396:	2200      	movs	r2, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	617a      	str	r2, [r7, #20]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043a2:	f04f 0b00 	mov.w	fp, #0
 80043a6:	4652      	mov	r2, sl
 80043a8:	465b      	mov	r3, fp
 80043aa:	f04f 0000 	mov.w	r0, #0
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	0159      	lsls	r1, r3, #5
 80043b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b8:	0150      	lsls	r0, r2, #5
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	ebb2 080a 	subs.w	r8, r2, sl
 80043c2:	eb63 090b 	sbc.w	r9, r3, fp
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043da:	ebb2 0408 	subs.w	r4, r2, r8
 80043de:	eb63 0509 	sbc.w	r5, r3, r9
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	00eb      	lsls	r3, r5, #3
 80043ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f0:	00e2      	lsls	r2, r4, #3
 80043f2:	4614      	mov	r4, r2
 80043f4:	461d      	mov	r5, r3
 80043f6:	eb14 030a 	adds.w	r3, r4, sl
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	eb45 030b 	adc.w	r3, r5, fp
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800440e:	4629      	mov	r1, r5
 8004410:	028b      	lsls	r3, r1, #10
 8004412:	4621      	mov	r1, r4
 8004414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004418:	4621      	mov	r1, r4
 800441a:	028a      	lsls	r2, r1, #10
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004422:	2200      	movs	r2, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	60fa      	str	r2, [r7, #12]
 8004428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800442c:	f7fc fb88 	bl	8000b40 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004452:	e002      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetSysClockFreq+0x184>)
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800445c:	4618      	mov	r0, r3
 800445e:	3740      	adds	r7, #64	; 0x40
 8004460:	46bd      	mov	sp, r7
 8004462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	00f42400 	.word	0x00f42400
 8004470:	017d7840 	.word	0x017d7840

08004474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <HAL_RCC_GetHCLKFreq+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000020 	.word	0x20000020

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004490:	f7ff fff0 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	0a9b      	lsrs	r3, r3, #10
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4903      	ldr	r1, [pc, #12]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40023800 	.word	0x40023800
 80044b0:	08005d88 	.word	0x08005d88

080044b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e041      	b.n	800454a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd fea4 	bl	8002228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f000 f9ce 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d001      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e04e      	b.n	800460a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a23      	ldr	r2, [pc, #140]	; (8004618 <HAL_TIM_Base_Start_IT+0xc4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004596:	d01d      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1f      	ldr	r2, [pc, #124]	; (800461c <HAL_TIM_Base_Start_IT+0xc8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <HAL_TIM_Base_Start_IT+0xcc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <HAL_TIM_Base_Start_IT+0xd0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <HAL_TIM_Base_Start_IT+0xd4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <HAL_TIM_Base_Start_IT+0xd8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <HAL_TIM_Base_Start_IT+0xdc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d111      	bne.n	80045f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b06      	cmp	r3, #6
 80045e4:	d010      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f6:	e007      	b.n	8004608 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40000c00 	.word	0x40000c00
 8004628:	40010400 	.word	0x40010400
 800462c:	40014000 	.word	0x40014000
 8004630:	40001800 	.word	0x40001800

08004634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d122      	bne.n	8004690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d11b      	bne.n	8004690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0202 	mvn.w	r2, #2
 8004660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8ee 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f8e0 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f8f1 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b04      	cmp	r3, #4
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d11b      	bne.n	80046e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0204 	mvn.w	r2, #4
 80046b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f8c4 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f8b6 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8c7 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d122      	bne.n	8004738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d11b      	bne.n	8004738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0208 	mvn.w	r2, #8
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2204      	movs	r2, #4
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f89a 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f88c 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f89d 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b10      	cmp	r3, #16
 8004744:	d122      	bne.n	800478c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b10      	cmp	r3, #16
 8004752:	d11b      	bne.n	800478c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0210 	mvn.w	r2, #16
 800475c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2208      	movs	r2, #8
 8004762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f870 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 8004778:	e005      	b.n	8004786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f862 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f873 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0201 	mvn.w	r2, #1
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fb46 	bl	8000e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d10e      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d107      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f97e 	bl	8004ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d10e      	bne.n	8004810 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d107      	bne.n	8004810 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f838 	bl	8004880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b20      	cmp	r3, #32
 800481c:	d10e      	bne.n	800483c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b20      	cmp	r3, #32
 800482a:	d107      	bne.n	800483c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0220 	mvn.w	r2, #32
 8004834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f948 	bl	8004acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00f      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d108      	bne.n	80048e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d027      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d023      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d017      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <TIM_Base_SetConfig+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <TIM_Base_SetConfig+0x12c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <TIM_Base_SetConfig+0x130>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <TIM_Base_SetConfig+0x134>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <TIM_Base_SetConfig+0x138>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <TIM_Base_SetConfig+0x13c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40001800 	.word	0x40001800
 80049cc:	40001c00 	.word	0x40001c00
 80049d0:	40002000 	.word	0x40002000

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e05a      	b.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d022      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d01d      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d018      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1a      	ldr	r2, [pc, #104]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d10c      	bne.n	8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40001800 	.word	0x40001800

08004acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UpdateQuaternion>:
double DeltaT=0.025;
float Kp = 30.0;
float Ki = 0.0;

void UpdateQuaternion (float A[],float G[] , float M[],float Q[])
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
         /*   newTime = micros();
            deltaT = newTime - oldTime;
            oldTime = newTime;
            deltaT = fabs(deltaT * 0.001 * 0.001);*/

            switch (FilterSelecter) {
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <UpdateQuaternion+0x48>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d002      	beq.n	8004b10 <UpdateQuaternion+0x1c>
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d003      	beq.n	8004b16 <UpdateQuaternion+0x22>
 8004b0e:	e009      	b.n	8004b24 <UpdateQuaternion+0x30>
                case MADGWICK:
                    Mdgwick();
 8004b10:	f000 fa04 	bl	8004f1c <Mdgwick>
                    break;
 8004b14:	e00d      	b.n	8004b32 <UpdateQuaternion+0x3e>
                case MAHONY:
                    Mahony(A,G,M,Q);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fa07 	bl	8004f30 <Mahony>
                    break;
 8004b22:	e006      	b.n	8004b32 <UpdateQuaternion+0x3e>
                default:
                    NoFilter(A,G,M,Q);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f808 	bl	8004b40 <NoFilter>
                    break;
 8004b30:	bf00      	nop
            }
}
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000029 	.word	0x20000029

08004b40 <NoFilter>:

void NoFilter (float A[],float G[] , float M[],float Q[])
{
 8004b40:	b5b0      	push	{r4, r5, r7, lr}
 8004b42:	b094      	sub	sp, #80	; 0x50
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
	 	          // get quaternion based on aircraft coordinate (Right-Hand, X-Forward, Z-Down)
	 	          // acc[mg], gyro[deg/s], mag [mG]
	 	          // gyro will be convert from [deg/s] to [rad/s] inside of this function
	 	          // quat_filter.update(-a[0], a[1], a[2], g[0] * DEG_TO_RAD, -g[1] * DEG_TO_RAD, -g[2] * DEG_TO_RAD, m[1], -m[0], m[2], q);

	 	          float an = -A[0];
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	edd3 7a00 	vldr	s15, [r3]
 8004b54:	eef1 7a67 	vneg.f32	s15, s15
 8004b58:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	 	          float ae = +A[1];
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	647b      	str	r3, [r7, #68]	; 0x44
	 	          float ad = +A[2];
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	643b      	str	r3, [r7, #64]	; 0x40
	 	          float gn = +G[0] * (M_PI/180.0);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fb fc8f 	bl	8000490 <__aeabi_f2d>
 8004b72:	a3e8      	add	r3, pc, #928	; (adr r3, 8004f14 <NoFilter+0x3d4>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fce2 	bl	8000540 <__aeabi_dmul>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f7fb ff8c 	bl	8000aa0 <__aeabi_d2f>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	 	          float ge = -G[1] * (M_PI/180.0);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	edd3 7a00 	vldr	s15, [r3]
 8004b94:	eef1 7a67 	vneg.f32	s15, s15
 8004b98:	ee17 3a90 	vmov	r3, s15
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fb fc77 	bl	8000490 <__aeabi_f2d>
 8004ba2:	a3dc      	add	r3, pc, #880	; (adr r3, 8004f14 <NoFilter+0x3d4>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fcca 	bl	8000540 <__aeabi_dmul>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f7fb ff74 	bl	8000aa0 <__aeabi_d2f>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	63bb      	str	r3, [r7, #56]	; 0x38
	 	          float gd = -G[2] * (M_PI/180.0);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	edd3 7a00 	vldr	s15, [r3]
 8004bc4:	eef1 7a67 	vneg.f32	s15, s15
 8004bc8:	ee17 3a90 	vmov	r3, s15
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fb fc5f 	bl	8000490 <__aeabi_f2d>
 8004bd2:	a3d0      	add	r3, pc, #832	; (adr r3, 8004f14 <NoFilter+0x3d4>)
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f7fb fcb2 	bl	8000540 <__aeabi_dmul>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	f7fb ff5c 	bl	8000aa0 <__aeabi_d2f>
 8004be8:	4603      	mov	r3, r0
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
	 	          float mn = +M[1];
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30
	 	          float me = -M[0];
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	edd3 7a00 	vldr	s15, [r3]
 8004bf8:	eef1 7a67 	vneg.f32	s15, s15
 8004bfc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	 	          float md = +M[2];
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28

	 	          for (size_t i = 0; i < NFilterIteration; ++i)
 8004c06:	2300      	movs	r3, #0
 8004c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c0a:	e16f      	b.n	8004eec <NoFilter+0x3ac>
	 	          {
	 	        		float q0 = Q[0];
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
	 	        		float q1 = Q[1];
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	623b      	str	r3, [r7, #32]
	 	        		float q2 = Q[2];
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	61fb      	str	r3, [r7, #28]
	 	        		float q3 = Q[3];
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	61bb      	str	r3, [r7, #24]


	 	        	    Q[0] += 0.5f * (-q1 * gn - q2 * ge - q3 * gd) * DeltaT;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fb fc31 	bl	8000490 <__aeabi_f2d>
 8004c2e:	4604      	mov	r4, r0
 8004c30:	460d      	mov	r5, r1
 8004c32:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c36:	eeb1 7a67 	vneg.f32	s14, s15
 8004c3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c46:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c52:	edd7 6a06 	vldr	s13, [r7, #24]
 8004c56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c6a:	ee17 0a90 	vmov	r0, s15
 8004c6e:	f7fb fc0f 	bl	8000490 <__aeabi_f2d>
 8004c72:	4ba5      	ldr	r3, [pc, #660]	; (8004f08 <NoFilter+0x3c8>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb fc62 	bl	8000540 <__aeabi_dmul>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4620      	mov	r0, r4
 8004c82:	4629      	mov	r1, r5
 8004c84:	f7fb faa6 	bl	80001d4 <__adddf3>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f7fb ff06 	bl	8000aa0 <__aeabi_d2f>
 8004c94:	4602      	mov	r2, r0
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	601a      	str	r2, [r3, #0]
	 	        	    Q[1] += 0.5f * (q0 * gn + q2 * gd - q3 * ge) * DeltaT;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fb fbf5 	bl	8000490 <__aeabi_f2d>
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	460d      	mov	r5, r1
 8004caa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004cae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cc6:	edd7 6a06 	vldr	s13, [r7, #24]
 8004cca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cde:	ee17 0a90 	vmov	r0, s15
 8004ce2:	f7fb fbd5 	bl	8000490 <__aeabi_f2d>
 8004ce6:	4b88      	ldr	r3, [pc, #544]	; (8004f08 <NoFilter+0x3c8>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f7fb fc28 	bl	8000540 <__aeabi_dmul>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7fb fa6c 	bl	80001d4 <__adddf3>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4610      	mov	r0, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	1d1c      	adds	r4, r3, #4
 8004d08:	f7fb feca 	bl	8000aa0 <__aeabi_d2f>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	6023      	str	r3, [r4, #0]
	 	        	    Q[2] += 0.5f * (q0 * ge - q1 * gd + q3 * gn) * DeltaT;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	3308      	adds	r3, #8
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fb fbba 	bl	8000490 <__aeabi_f2d>
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	460d      	mov	r5, r1
 8004d20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004d24:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d2c:	edd7 6a08 	vldr	s13, [r7, #32]
 8004d30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d3c:	edd7 6a06 	vldr	s13, [r7, #24]
 8004d40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d54:	ee17 0a90 	vmov	r0, s15
 8004d58:	f7fb fb9a 	bl	8000490 <__aeabi_f2d>
 8004d5c:	4b6a      	ldr	r3, [pc, #424]	; (8004f08 <NoFilter+0x3c8>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f7fb fbed 	bl	8000540 <__aeabi_dmul>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	f7fb fa31 	bl	80001d4 <__adddf3>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f103 0408 	add.w	r4, r3, #8
 8004d80:	f7fb fe8e 	bl	8000aa0 <__aeabi_d2f>
 8004d84:	4603      	mov	r3, r0
 8004d86:	6023      	str	r3, [r4, #0]
	 	        	    Q[3] += 0.5f * (q0 * gd + q1 * ge - q2 * gn) * DeltaT;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fb fb7e 	bl	8000490 <__aeabi_f2d>
 8004d94:	4604      	mov	r4, r0
 8004d96:	460d      	mov	r5, r1
 8004d98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004d9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004da4:	edd7 6a08 	vldr	s13, [r7, #32]
 8004da8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004db8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dcc:	ee17 0a90 	vmov	r0, s15
 8004dd0:	f7fb fb5e 	bl	8000490 <__aeabi_f2d>
 8004dd4:	4b4c      	ldr	r3, [pc, #304]	; (8004f08 <NoFilter+0x3c8>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f7fb fbb1 	bl	8000540 <__aeabi_dmul>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4620      	mov	r0, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	f7fb f9f5 	bl	80001d4 <__adddf3>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f103 040c 	add.w	r4, r3, #12
 8004df8:	f7fb fe52 	bl	8000aa0 <__aeabi_d2f>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	6023      	str	r3, [r4, #0]

	 	        	    float  Norm = 1.0 / sqrt(Q[0] * Q[0] + Q[1] * Q[1] + Q[2] * Q[2] + Q[3] * Q[3]);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	ed93 7a00 	vldr	s14, [r3]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	edd3 7a00 	vldr	s15, [r3]
 8004e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	3304      	adds	r3, #4
 8004e14:	edd3 6a00 	vldr	s13, [r3]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	edd3 7a00 	vldr	s15, [r3]
 8004e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	edd3 6a00 	vldr	s13, [r3]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	edd3 7a00 	vldr	s15, [r3]
 8004e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	330c      	adds	r3, #12
 8004e44:	edd3 6a00 	vldr	s13, [r3]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	edd3 7a00 	vldr	s15, [r3]
 8004e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e58:	ee17 0a90 	vmov	r0, s15
 8004e5c:	f7fb fb18 	bl	8000490 <__aeabi_f2d>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	ec43 2b10 	vmov	d0, r2, r3
 8004e68:	f000 fbd4 	bl	8005614 <sqrt>
 8004e6c:	ec53 2b10 	vmov	r2, r3, d0
 8004e70:	f04f 0000 	mov.w	r0, #0
 8004e74:	4925      	ldr	r1, [pc, #148]	; (8004f0c <NoFilter+0x3cc>)
 8004e76:	f7fb fc8d 	bl	8000794 <__aeabi_ddiv>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	f7fb fe0d 	bl	8000aa0 <__aeabi_d2f>
 8004e86:	4603      	mov	r3, r0
 8004e88:	617b      	str	r3, [r7, #20]

	 	        	    Q[0] *= Norm;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	ed93 7a00 	vldr	s14, [r3]
 8004e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	edc3 7a00 	vstr	s15, [r3]
	 	        	    Q[1] *= Norm;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	ed93 7a00 	vldr	s14, [r3]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc3 7a00 	vstr	s15, [r3]
	 	        	    Q[2] *= Norm;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	ed93 7a00 	vldr	s14, [r3]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	edc3 7a00 	vstr	s15, [r3]
	 	        	    Q[3] *= Norm;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	ed93 7a00 	vldr	s14, [r3]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc3 7a00 	vstr	s15, [r3]
	 	          for (size_t i = 0; i < NFilterIteration; ++i)
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee8:	3301      	adds	r3, #1
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <NoFilter+0x3d0>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	f4ff ae8a 	bcc.w	8004c0c <NoFilter+0xcc>
	 	            }



}
 8004ef8:	bf00      	nop
 8004efa:	bf00      	nop
 8004efc:	3750      	adds	r7, #80	; 0x50
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bdb0      	pop	{r4, r5, r7, pc}
 8004f02:	bf00      	nop
 8004f04:	f3af 8000 	nop.w
 8004f08:	20000030 	.word	0x20000030
 8004f0c:	3ff00000 	.word	0x3ff00000
 8004f10:	2000002c 	.word	0x2000002c
 8004f14:	a2529d39 	.word	0xa2529d39
 8004f18:	3f91df46 	.word	0x3f91df46

08004f1c <Mdgwick>:

void Mdgwick()
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	0000      	movs	r0, r0
 8004f2c:	0000      	movs	r0, r0
	...

08004f30 <Mahony>:

void Mahony(float A[],float G[] , float M[],float Q[])
{
 8004f30:	b5b0      	push	{r4, r5, r7, lr}
 8004f32:	b098      	sub	sp, #96	; 0x60
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
	// float Ki = 0.0;
	// with MPU-9250, angles start oscillating at Kp=40. Ki does not seem to help and is not required.
	// with MPU-6050, some instability observed at Kp=100 Now set to 30.


	float an = -A[0];
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	edd3 7a00 	vldr	s15, [r3]
 8004f44:	eef1 7a67 	vneg.f32	s15, s15
 8004f48:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float ae = +A[1];
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	64fb      	str	r3, [r7, #76]	; 0x4c
	float ad = +A[2];
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	64bb      	str	r3, [r7, #72]	; 0x48
	float gn = +G[0] * (M_PI/180.0);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb fa97 	bl	8000490 <__aeabi_f2d>
 8004f62:	f20f 434c 	addw	r3, pc, #1100	; 0x44c
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb fae9 	bl	8000540 <__aeabi_dmul>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	f7fb fd93 	bl	8000aa0 <__aeabi_d2f>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
	float ge = -G[1] * (M_PI/180.0);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	3304      	adds	r3, #4
 8004f82:	edd3 7a00 	vldr	s15, [r3]
 8004f86:	eef1 7a67 	vneg.f32	s15, s15
 8004f8a:	ee17 3a90 	vmov	r3, s15
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fb fa7e 	bl	8000490 <__aeabi_f2d>
 8004f94:	f20f 4318 	addw	r3, pc, #1048	; 0x418
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f7fb fad0 	bl	8000540 <__aeabi_dmul>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f7fb fd7a 	bl	8000aa0 <__aeabi_d2f>
 8004fac:	4603      	mov	r3, r0
 8004fae:	65bb      	str	r3, [r7, #88]	; 0x58
	float gd = -G[2] * (M_PI/180.0);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	edd3 7a00 	vldr	s15, [r3]
 8004fb8:	eef1 7a67 	vneg.f32	s15, s15
 8004fbc:	ee17 3a90 	vmov	r3, s15
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fb fa65 	bl	8000490 <__aeabi_f2d>
 8004fc6:	a3fa      	add	r3, pc, #1000	; (adr r3, 80053b0 <Mahony+0x480>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fab8 	bl	8000540 <__aeabi_dmul>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7fb fd62 	bl	8000aa0 <__aeabi_d2f>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	657b      	str	r3, [r7, #84]	; 0x54
	float mn = +M[1];
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	647b      	str	r3, [r7, #68]	; 0x44
	float me = -M[0];
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	edd3 7a00 	vldr	s15, [r3]
 8004fec:	eef1 7a67 	vneg.f32	s15, s15
 8004ff0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float md = +M[2];
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float qa, qb, qc;
	static float ix = 0.0, iy = 0.0, iz = 0.0;  //integral feedback terms
	float Tmp;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	Tmp = ( (an * an) + (ae * ae ) + (ad * ad) );
 8004ffa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004ffe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005002:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005006:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800500a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800500e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005012:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800501a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38


	if (Tmp > 0.0)
 800501e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502a:	f340 8165 	ble.w	80052f8 <Mahony+0x3c8>
	{
		// Normalise accelerometer (assumed to measure the direction of gravity in body frame)
		Norm = 1.0 / sqrtf(Tmp);
 800502e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8005032:	f000 fb49 	bl	80056c8 <sqrtf>
 8005036:	ee10 3a10 	vmov	r3, s0
 800503a:	4618      	mov	r0, r3
 800503c:	f7fb fa28 	bl	8000490 <__aeabi_f2d>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	f04f 0000 	mov.w	r0, #0
 8005048:	49d1      	ldr	r1, [pc, #836]	; (8005390 <Mahony+0x460>)
 800504a:	f7fb fba3 	bl	8000794 <__aeabi_ddiv>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4610      	mov	r0, r2
 8005054:	4619      	mov	r1, r3
 8005056:	f7fb fd23 	bl	8000aa0 <__aeabi_d2f>
 800505a:	4603      	mov	r3, r0
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
		an *= Norm;
 800505e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005062:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		ae *= Norm;
 800506e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005072:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		ad *= Norm;
 800507e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005082:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

		// Estimated direction of gravity in the body frame (factor of two divided out)
		vx = Q[1] * Q[3] - Q[0] * Q[2];
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	3304      	adds	r3, #4
 8005092:	ed93 7a00 	vldr	s14, [r3]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	edd3 7a00 	vldr	s15, [r3]
 800509e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	edd3 6a00 	vldr	s13, [r3]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	3308      	adds	r3, #8
 80050ac:	edd3 7a00 	vldr	s15, [r3]
 80050b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		vy = Q[0] * Q[1] + Q[2] * Q[3];
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	ed93 7a00 	vldr	s14, [r3]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	3304      	adds	r3, #4
 80050c6:	edd3 7a00 	vldr	s15, [r3]
 80050ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	edd3 6a00 	vldr	s13, [r3]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	edd3 7a00 	vldr	s15, [r3]
 80050de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050e6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		vz = Q[0] * Q[0] - 0.5f + Q[3] * Q[3];
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	ed93 7a00 	vldr	s14, [r3]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	edd3 7a00 	vldr	s15, [r3]
 80050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050fe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	edd3 6a00 	vldr	s13, [r3]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	edd3 7a00 	vldr	s15, [r3]
 8005112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800511a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Error is cross product between estimated and measured direction of gravity in body frame
		// (half the actual magnitude)
		ex = (ae * vz - ad * vy);
 800511e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005122:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800512a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800512e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800513a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		ey = (ad * vx - an * vz);
 800513e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005142:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800514a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800514e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800515a:	edc7 7a08 	vstr	s15, [r7, #32]
		ez = (an * vy - ae * vx);
 800515e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005162:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800516a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800516e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]

		// Compute and apply to gyro term the integral feedback, if enabled
		if (Ki > 0.0f) {
 800517e:	4b85      	ldr	r3, [pc, #532]	; (8005394 <Mahony+0x464>)
 8005180:	edd3 7a00 	vldr	s15, [r3]
 8005184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518c:	f340 808d 	ble.w	80052aa <Mahony+0x37a>
			ix += Ki * ex * DeltaT;  // integral error scaled by Ki
 8005190:	4b81      	ldr	r3, [pc, #516]	; (8005398 <Mahony+0x468>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7fb f97b 	bl	8000490 <__aeabi_f2d>
 800519a:	4604      	mov	r4, r0
 800519c:	460d      	mov	r5, r1
 800519e:	4b7d      	ldr	r3, [pc, #500]	; (8005394 <Mahony+0x464>)
 80051a0:	ed93 7a00 	vldr	s14, [r3]
 80051a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80051a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ac:	ee17 0a90 	vmov	r0, s15
 80051b0:	f7fb f96e 	bl	8000490 <__aeabi_f2d>
 80051b4:	4b79      	ldr	r3, [pc, #484]	; (800539c <Mahony+0x46c>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f7fb f9c1 	bl	8000540 <__aeabi_dmul>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4620      	mov	r0, r4
 80051c4:	4629      	mov	r1, r5
 80051c6:	f7fb f805 	bl	80001d4 <__adddf3>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	f7fb fc65 	bl	8000aa0 <__aeabi_d2f>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a6f      	ldr	r2, [pc, #444]	; (8005398 <Mahony+0x468>)
 80051da:	6013      	str	r3, [r2, #0]
			iy += Ki * ey * DeltaT;
 80051dc:	4b70      	ldr	r3, [pc, #448]	; (80053a0 <Mahony+0x470>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fb f955 	bl	8000490 <__aeabi_f2d>
 80051e6:	4604      	mov	r4, r0
 80051e8:	460d      	mov	r5, r1
 80051ea:	4b6a      	ldr	r3, [pc, #424]	; (8005394 <Mahony+0x464>)
 80051ec:	ed93 7a00 	vldr	s14, [r3]
 80051f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80051f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f8:	ee17 0a90 	vmov	r0, s15
 80051fc:	f7fb f948 	bl	8000490 <__aeabi_f2d>
 8005200:	4b66      	ldr	r3, [pc, #408]	; (800539c <Mahony+0x46c>)
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	f7fb f99b 	bl	8000540 <__aeabi_dmul>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4620      	mov	r0, r4
 8005210:	4629      	mov	r1, r5
 8005212:	f7fa ffdf 	bl	80001d4 <__adddf3>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	f7fb fc3f 	bl	8000aa0 <__aeabi_d2f>
 8005222:	4603      	mov	r3, r0
 8005224:	4a5e      	ldr	r2, [pc, #376]	; (80053a0 <Mahony+0x470>)
 8005226:	6013      	str	r3, [r2, #0]
			iz += Ki * ez * DeltaT;
 8005228:	4b5e      	ldr	r3, [pc, #376]	; (80053a4 <Mahony+0x474>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7fb f92f 	bl	8000490 <__aeabi_f2d>
 8005232:	4604      	mov	r4, r0
 8005234:	460d      	mov	r5, r1
 8005236:	4b57      	ldr	r3, [pc, #348]	; (8005394 <Mahony+0x464>)
 8005238:	ed93 7a00 	vldr	s14, [r3]
 800523c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005244:	ee17 0a90 	vmov	r0, s15
 8005248:	f7fb f922 	bl	8000490 <__aeabi_f2d>
 800524c:	4b53      	ldr	r3, [pc, #332]	; (800539c <Mahony+0x46c>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	f7fb f975 	bl	8000540 <__aeabi_dmul>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4620      	mov	r0, r4
 800525c:	4629      	mov	r1, r5
 800525e:	f7fa ffb9 	bl	80001d4 <__adddf3>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	f7fb fc19 	bl	8000aa0 <__aeabi_d2f>
 800526e:	4603      	mov	r3, r0
 8005270:	4a4c      	ldr	r2, [pc, #304]	; (80053a4 <Mahony+0x474>)
 8005272:	6013      	str	r3, [r2, #0]
			gn += ix;  // apply integral feedback
 8005274:	4b48      	ldr	r3, [pc, #288]	; (8005398 <Mahony+0x468>)
 8005276:	edd3 7a00 	vldr	s15, [r3]
 800527a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800527e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005282:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			ge += iy;
 8005286:	4b46      	ldr	r3, [pc, #280]	; (80053a0 <Mahony+0x470>)
 8005288:	edd3 7a00 	vldr	s15, [r3]
 800528c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005294:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			gd += iz;
 8005298:	4b42      	ldr	r3, [pc, #264]	; (80053a4 <Mahony+0x474>)
 800529a:	edd3 7a00 	vldr	s15, [r3]
 800529e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80052a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		}

		// Apply proportional feedback to gyro term
		gn += Kp * ex;
 80052aa:	4b3f      	ldr	r3, [pc, #252]	; (80053a8 <Mahony+0x478>)
 80052ac:	ed93 7a00 	vldr	s14, [r3]
 80052b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80052b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80052bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		ge += Kp * ey;
 80052c4:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <Mahony+0x478>)
 80052c6:	ed93 7a00 	vldr	s14, [r3]
 80052ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80052d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		gd += Kp * ez;
 80052de:	4b32      	ldr	r3, [pc, #200]	; (80053a8 <Mahony+0x478>)
 80052e0:	ed93 7a00 	vldr	s14, [r3]
 80052e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80052e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ec:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80052f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	}

	// Integrate rate of change of quaternion, q cross gyro term
	DeltaT = 0.5 * DeltaT;
 80052f8:	4b28      	ldr	r3, [pc, #160]	; (800539c <Mahony+0x46c>)
 80052fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	4b2a      	ldr	r3, [pc, #168]	; (80053ac <Mahony+0x47c>)
 8005304:	f7fb f91c 	bl	8000540 <__aeabi_dmul>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4923      	ldr	r1, [pc, #140]	; (800539c <Mahony+0x46c>)
 800530e:	e9c1 2300 	strd	r2, r3, [r1]
	ge *= DeltaT;  // pre-multiply common factors
 8005312:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005314:	f7fb f8bc 	bl	8000490 <__aeabi_f2d>
 8005318:	4b20      	ldr	r3, [pc, #128]	; (800539c <Mahony+0x46c>)
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f7fb f90f 	bl	8000540 <__aeabi_dmul>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4610      	mov	r0, r2
 8005328:	4619      	mov	r1, r3
 800532a:	f7fb fbb9 	bl	8000aa0 <__aeabi_d2f>
 800532e:	4603      	mov	r3, r0
 8005330:	65bb      	str	r3, [r7, #88]	; 0x58
	ge *= DeltaT;
 8005332:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005334:	f7fb f8ac 	bl	8000490 <__aeabi_f2d>
 8005338:	4b18      	ldr	r3, [pc, #96]	; (800539c <Mahony+0x46c>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fb f8ff 	bl	8000540 <__aeabi_dmul>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	f7fb fba9 	bl	8000aa0 <__aeabi_d2f>
 800534e:	4603      	mov	r3, r0
 8005350:	65bb      	str	r3, [r7, #88]	; 0x58
	gd *= DeltaT;
 8005352:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005354:	f7fb f89c 	bl	8000490 <__aeabi_f2d>
 8005358:	4b10      	ldr	r3, [pc, #64]	; (800539c <Mahony+0x46c>)
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f7fb f8ef 	bl	8000540 <__aeabi_dmul>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4610      	mov	r0, r2
 8005368:	4619      	mov	r1, r3
 800536a:	f7fb fb99 	bl	8000aa0 <__aeabi_d2f>
 800536e:	4603      	mov	r3, r0
 8005370:	657b      	str	r3, [r7, #84]	; 0x54
	qa = Q[0];
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	61bb      	str	r3, [r7, #24]
	qb = Q[1];
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	617b      	str	r3, [r7, #20]
	qc = Q[2];
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	613b      	str	r3, [r7, #16]
	Q[0] += (-qb * gn - qc * ge - Q[3] * gd);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	ed93 7a00 	vldr	s14, [r3]
 800538a:	e015      	b.n	80053b8 <Mahony+0x488>
 800538c:	f3af 8000 	nop.w
 8005390:	3ff00000 	.word	0x3ff00000
 8005394:	200001e0 	.word	0x200001e0
 8005398:	200001e4 	.word	0x200001e4
 800539c:	20000030 	.word	0x20000030
 80053a0:	200001e8 	.word	0x200001e8
 80053a4:	200001ec 	.word	0x200001ec
 80053a8:	20000038 	.word	0x20000038
 80053ac:	3fe00000 	.word	0x3fe00000
 80053b0:	a2529d39 	.word	0xa2529d39
 80053b4:	3f91df46 	.word	0x3f91df46
 80053b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80053bc:	eef1 6a67 	vneg.f32	s13, s15
 80053c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80053c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80053cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80053d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80053d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	ed93 6a00 	vldr	s12, [r3]
 80053e0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80053e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80053e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80053ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	edc3 7a00 	vstr	s15, [r3]
	Q[1] += (qa * gn + qc * gd - Q[3] * ge);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	3304      	adds	r3, #4
 80053fa:	ed93 7a00 	vldr	s14, [r3]
 80053fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8005402:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005406:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800540a:	ed97 6a04 	vldr	s12, [r7, #16]
 800540e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005412:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005416:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	ed93 6a00 	vldr	s12, [r3]
 8005422:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005426:	ee66 7a27 	vmul.f32	s15, s12, s15
 800542a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	3304      	adds	r3, #4
 8005432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005436:	edc3 7a00 	vstr	s15, [r3]
	Q[2] += (qa * ge - qb * gd + Q[3] * gn);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	3308      	adds	r3, #8
 800543e:	ed93 7a00 	vldr	s14, [r3]
 8005442:	edd7 6a06 	vldr	s13, [r7, #24]
 8005446:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800544a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800544e:	ed97 6a05 	vldr	s12, [r7, #20]
 8005452:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005456:	ee66 7a27 	vmul.f32	s15, s12, s15
 800545a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	ed93 6a00 	vldr	s12, [r3]
 8005466:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800546a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800546e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	3308      	adds	r3, #8
 8005476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547a:	edc3 7a00 	vstr	s15, [r3]
	Q[3] += (qa * gd + qb * ge - qc * gn);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	ed93 7a00 	vldr	s14, [r3]
 8005486:	edd7 6a06 	vldr	s13, [r7, #24]
 800548a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800548e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005492:	ed97 6a05 	vldr	s12, [r7, #20]
 8005496:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800549a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800549e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80054a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80054a6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80054aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80054ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054ba:	edc3 7a00 	vstr	s15, [r3]

	// renormalise quaternion
	Norm = 1.0 / sqrt(Q[0] * Q[0] + Q[1] * Q[1] + Q[2] * Q[2] + Q[3] * Q[3]);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	ed93 7a00 	vldr	s14, [r3]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	edd3 7a00 	vldr	s15, [r3]
 80054ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	3304      	adds	r3, #4
 80054d2:	edd3 6a00 	vldr	s13, [r3]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	3304      	adds	r3, #4
 80054da:	edd3 7a00 	vldr	s15, [r3]
 80054de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	edd3 6a00 	vldr	s13, [r3]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	3308      	adds	r3, #8
 80054f2:	edd3 7a00 	vldr	s15, [r3]
 80054f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	edd3 6a00 	vldr	s13, [r3]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	edd3 7a00 	vldr	s15, [r3]
 800550e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005516:	ee17 0a90 	vmov	r0, s15
 800551a:	f7fa ffb9 	bl	8000490 <__aeabi_f2d>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	ec43 2b10 	vmov	d0, r2, r3
 8005526:	f000 f875 	bl	8005614 <sqrt>
 800552a:	ec53 2b10 	vmov	r2, r3, d0
 800552e:	f04f 0000 	mov.w	r0, #0
 8005532:	491e      	ldr	r1, [pc, #120]	; (80055ac <Mahony+0x67c>)
 8005534:	f7fb f92e 	bl	8000794 <__aeabi_ddiv>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	f7fb faae 	bl	8000aa0 <__aeabi_d2f>
 8005544:	4603      	mov	r3, r0
 8005546:	637b      	str	r3, [r7, #52]	; 0x34
	Q[0] = Q[0] * Norm;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	ed93 7a00 	vldr	s14, [r3]
 800554e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	edc3 7a00 	vstr	s15, [r3]
	Q[1] = Q[1] * Norm;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	3304      	adds	r3, #4
 8005560:	ed93 7a00 	vldr	s14, [r3]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	3304      	adds	r3, #4
 8005568:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800556c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005570:	edc3 7a00 	vstr	s15, [r3]
	Q[2] = Q[2] * Norm;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	ed93 7a00 	vldr	s14, [r3]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005588:	edc3 7a00 	vstr	s15, [r3]
	Q[3] = Q[3] * Norm;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	ed93 7a00 	vldr	s14, [r3]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	330c      	adds	r3, #12
 8005598:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800559c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a0:	edc3 7a00 	vstr	s15, [r3]
	    }
 80055a4:	bf00      	nop
 80055a6:	3760      	adds	r7, #96	; 0x60
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bdb0      	pop	{r4, r5, r7, pc}
 80055ac:	3ff00000 	.word	0x3ff00000

080055b0 <__errno>:
 80055b0:	4b01      	ldr	r3, [pc, #4]	; (80055b8 <__errno+0x8>)
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	2000003c 	.word	0x2000003c

080055bc <__libc_init_array>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	4d0d      	ldr	r5, [pc, #52]	; (80055f4 <__libc_init_array+0x38>)
 80055c0:	4c0d      	ldr	r4, [pc, #52]	; (80055f8 <__libc_init_array+0x3c>)
 80055c2:	1b64      	subs	r4, r4, r5
 80055c4:	10a4      	asrs	r4, r4, #2
 80055c6:	2600      	movs	r6, #0
 80055c8:	42a6      	cmp	r6, r4
 80055ca:	d109      	bne.n	80055e0 <__libc_init_array+0x24>
 80055cc:	4d0b      	ldr	r5, [pc, #44]	; (80055fc <__libc_init_array+0x40>)
 80055ce:	4c0c      	ldr	r4, [pc, #48]	; (8005600 <__libc_init_array+0x44>)
 80055d0:	f000 fbb6 	bl	8005d40 <_init>
 80055d4:	1b64      	subs	r4, r4, r5
 80055d6:	10a4      	asrs	r4, r4, #2
 80055d8:	2600      	movs	r6, #0
 80055da:	42a6      	cmp	r6, r4
 80055dc:	d105      	bne.n	80055ea <__libc_init_array+0x2e>
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e4:	4798      	blx	r3
 80055e6:	3601      	adds	r6, #1
 80055e8:	e7ee      	b.n	80055c8 <__libc_init_array+0xc>
 80055ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ee:	4798      	blx	r3
 80055f0:	3601      	adds	r6, #1
 80055f2:	e7f2      	b.n	80055da <__libc_init_array+0x1e>
 80055f4:	08005dd4 	.word	0x08005dd4
 80055f8:	08005dd4 	.word	0x08005dd4
 80055fc:	08005dd4 	.word	0x08005dd4
 8005600:	08005dd8 	.word	0x08005dd8

08005604 <memset>:
 8005604:	4402      	add	r2, r0
 8005606:	4603      	mov	r3, r0
 8005608:	4293      	cmp	r3, r2
 800560a:	d100      	bne.n	800560e <memset+0xa>
 800560c:	4770      	bx	lr
 800560e:	f803 1b01 	strb.w	r1, [r3], #1
 8005612:	e7f9      	b.n	8005608 <memset+0x4>

08005614 <sqrt>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	ed2d 8b02 	vpush	{d8}
 800561a:	ec55 4b10 	vmov	r4, r5, d0
 800561e:	f000 f871 	bl	8005704 <__ieee754_sqrt>
 8005622:	4622      	mov	r2, r4
 8005624:	462b      	mov	r3, r5
 8005626:	4620      	mov	r0, r4
 8005628:	4629      	mov	r1, r5
 800562a:	eeb0 8a40 	vmov.f32	s16, s0
 800562e:	eef0 8a60 	vmov.f32	s17, s1
 8005632:	f7fb fa1f 	bl	8000a74 <__aeabi_dcmpun>
 8005636:	b990      	cbnz	r0, 800565e <sqrt+0x4a>
 8005638:	2200      	movs	r2, #0
 800563a:	2300      	movs	r3, #0
 800563c:	4620      	mov	r0, r4
 800563e:	4629      	mov	r1, r5
 8005640:	f7fb f9f0 	bl	8000a24 <__aeabi_dcmplt>
 8005644:	b158      	cbz	r0, 800565e <sqrt+0x4a>
 8005646:	f7ff ffb3 	bl	80055b0 <__errno>
 800564a:	2321      	movs	r3, #33	; 0x21
 800564c:	6003      	str	r3, [r0, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	2300      	movs	r3, #0
 8005652:	4610      	mov	r0, r2
 8005654:	4619      	mov	r1, r3
 8005656:	f7fb f89d 	bl	8000794 <__aeabi_ddiv>
 800565a:	ec41 0b18 	vmov	d8, r0, r1
 800565e:	eeb0 0a48 	vmov.f32	s0, s16
 8005662:	eef0 0a68 	vmov.f32	s1, s17
 8005666:	ecbd 8b02 	vpop	{d8}
 800566a:	bd38      	pop	{r3, r4, r5, pc}

0800566c <asinf>:
 800566c:	b508      	push	{r3, lr}
 800566e:	ed2d 8b02 	vpush	{d8}
 8005672:	eeb0 8a40 	vmov.f32	s16, s0
 8005676:	f000 f8f7 	bl	8005868 <__ieee754_asinf>
 800567a:	eeb4 8a48 	vcmp.f32	s16, s16
 800567e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005682:	eef0 8a40 	vmov.f32	s17, s0
 8005686:	d615      	bvs.n	80056b4 <asinf+0x48>
 8005688:	eeb0 0a48 	vmov.f32	s0, s16
 800568c:	f000 fb4a 	bl	8005d24 <fabsf>
 8005690:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005694:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569c:	dd0a      	ble.n	80056b4 <asinf+0x48>
 800569e:	f7ff ff87 	bl	80055b0 <__errno>
 80056a2:	ecbd 8b02 	vpop	{d8}
 80056a6:	2321      	movs	r3, #33	; 0x21
 80056a8:	6003      	str	r3, [r0, #0]
 80056aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80056ae:	4804      	ldr	r0, [pc, #16]	; (80056c0 <asinf+0x54>)
 80056b0:	f000 bb40 	b.w	8005d34 <nanf>
 80056b4:	eeb0 0a68 	vmov.f32	s0, s17
 80056b8:	ecbd 8b02 	vpop	{d8}
 80056bc:	bd08      	pop	{r3, pc}
 80056be:	bf00      	nop
 80056c0:	08005d90 	.word	0x08005d90

080056c4 <atan2f>:
 80056c4:	f000 b9b6 	b.w	8005a34 <__ieee754_atan2f>

080056c8 <sqrtf>:
 80056c8:	b508      	push	{r3, lr}
 80056ca:	ed2d 8b02 	vpush	{d8}
 80056ce:	eeb0 8a40 	vmov.f32	s16, s0
 80056d2:	f000 fa4f 	bl	8005b74 <__ieee754_sqrtf>
 80056d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80056da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056de:	d60c      	bvs.n	80056fa <sqrtf+0x32>
 80056e0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005700 <sqrtf+0x38>
 80056e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80056e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ec:	d505      	bpl.n	80056fa <sqrtf+0x32>
 80056ee:	f7ff ff5f 	bl	80055b0 <__errno>
 80056f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80056f6:	2321      	movs	r3, #33	; 0x21
 80056f8:	6003      	str	r3, [r0, #0]
 80056fa:	ecbd 8b02 	vpop	{d8}
 80056fe:	bd08      	pop	{r3, pc}
 8005700:	00000000 	.word	0x00000000

08005704 <__ieee754_sqrt>:
 8005704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005708:	ec55 4b10 	vmov	r4, r5, d0
 800570c:	4e55      	ldr	r6, [pc, #340]	; (8005864 <__ieee754_sqrt+0x160>)
 800570e:	43ae      	bics	r6, r5
 8005710:	ee10 0a10 	vmov	r0, s0
 8005714:	ee10 3a10 	vmov	r3, s0
 8005718:	462a      	mov	r2, r5
 800571a:	4629      	mov	r1, r5
 800571c:	d110      	bne.n	8005740 <__ieee754_sqrt+0x3c>
 800571e:	ee10 2a10 	vmov	r2, s0
 8005722:	462b      	mov	r3, r5
 8005724:	f7fa ff0c 	bl	8000540 <__aeabi_dmul>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f7fa fd50 	bl	80001d4 <__adddf3>
 8005734:	4604      	mov	r4, r0
 8005736:	460d      	mov	r5, r1
 8005738:	ec45 4b10 	vmov	d0, r4, r5
 800573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005740:	2d00      	cmp	r5, #0
 8005742:	dc10      	bgt.n	8005766 <__ieee754_sqrt+0x62>
 8005744:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005748:	4330      	orrs	r0, r6
 800574a:	d0f5      	beq.n	8005738 <__ieee754_sqrt+0x34>
 800574c:	b15d      	cbz	r5, 8005766 <__ieee754_sqrt+0x62>
 800574e:	ee10 2a10 	vmov	r2, s0
 8005752:	462b      	mov	r3, r5
 8005754:	ee10 0a10 	vmov	r0, s0
 8005758:	f7fa fd3a 	bl	80001d0 <__aeabi_dsub>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	f7fb f818 	bl	8000794 <__aeabi_ddiv>
 8005764:	e7e6      	b.n	8005734 <__ieee754_sqrt+0x30>
 8005766:	1512      	asrs	r2, r2, #20
 8005768:	d074      	beq.n	8005854 <__ieee754_sqrt+0x150>
 800576a:	07d4      	lsls	r4, r2, #31
 800576c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005770:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005774:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005778:	bf5e      	ittt	pl
 800577a:	0fda      	lsrpl	r2, r3, #31
 800577c:	005b      	lslpl	r3, r3, #1
 800577e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005782:	2400      	movs	r4, #0
 8005784:	0fda      	lsrs	r2, r3, #31
 8005786:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800578a:	107f      	asrs	r7, r7, #1
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	2516      	movs	r5, #22
 8005790:	4620      	mov	r0, r4
 8005792:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005796:	1886      	adds	r6, r0, r2
 8005798:	428e      	cmp	r6, r1
 800579a:	bfde      	ittt	le
 800579c:	1b89      	suble	r1, r1, r6
 800579e:	18b0      	addle	r0, r6, r2
 80057a0:	18a4      	addle	r4, r4, r2
 80057a2:	0049      	lsls	r1, r1, #1
 80057a4:	3d01      	subs	r5, #1
 80057a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80057aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80057ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057b2:	d1f0      	bne.n	8005796 <__ieee754_sqrt+0x92>
 80057b4:	462a      	mov	r2, r5
 80057b6:	f04f 0e20 	mov.w	lr, #32
 80057ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80057be:	4281      	cmp	r1, r0
 80057c0:	eb06 0c05 	add.w	ip, r6, r5
 80057c4:	dc02      	bgt.n	80057cc <__ieee754_sqrt+0xc8>
 80057c6:	d113      	bne.n	80057f0 <__ieee754_sqrt+0xec>
 80057c8:	459c      	cmp	ip, r3
 80057ca:	d811      	bhi.n	80057f0 <__ieee754_sqrt+0xec>
 80057cc:	f1bc 0f00 	cmp.w	ip, #0
 80057d0:	eb0c 0506 	add.w	r5, ip, r6
 80057d4:	da43      	bge.n	800585e <__ieee754_sqrt+0x15a>
 80057d6:	2d00      	cmp	r5, #0
 80057d8:	db41      	blt.n	800585e <__ieee754_sqrt+0x15a>
 80057da:	f100 0801 	add.w	r8, r0, #1
 80057de:	1a09      	subs	r1, r1, r0
 80057e0:	459c      	cmp	ip, r3
 80057e2:	bf88      	it	hi
 80057e4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80057e8:	eba3 030c 	sub.w	r3, r3, ip
 80057ec:	4432      	add	r2, r6
 80057ee:	4640      	mov	r0, r8
 80057f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80057f4:	f1be 0e01 	subs.w	lr, lr, #1
 80057f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80057fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005800:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005804:	d1db      	bne.n	80057be <__ieee754_sqrt+0xba>
 8005806:	430b      	orrs	r3, r1
 8005808:	d006      	beq.n	8005818 <__ieee754_sqrt+0x114>
 800580a:	1c50      	adds	r0, r2, #1
 800580c:	bf13      	iteet	ne
 800580e:	3201      	addne	r2, #1
 8005810:	3401      	addeq	r4, #1
 8005812:	4672      	moveq	r2, lr
 8005814:	f022 0201 	bicne.w	r2, r2, #1
 8005818:	1063      	asrs	r3, r4, #1
 800581a:	0852      	lsrs	r2, r2, #1
 800581c:	07e1      	lsls	r1, r4, #31
 800581e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005822:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005826:	bf48      	it	mi
 8005828:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800582c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005830:	4614      	mov	r4, r2
 8005832:	e781      	b.n	8005738 <__ieee754_sqrt+0x34>
 8005834:	0ad9      	lsrs	r1, r3, #11
 8005836:	3815      	subs	r0, #21
 8005838:	055b      	lsls	r3, r3, #21
 800583a:	2900      	cmp	r1, #0
 800583c:	d0fa      	beq.n	8005834 <__ieee754_sqrt+0x130>
 800583e:	02cd      	lsls	r5, r1, #11
 8005840:	d50a      	bpl.n	8005858 <__ieee754_sqrt+0x154>
 8005842:	f1c2 0420 	rsb	r4, r2, #32
 8005846:	fa23 f404 	lsr.w	r4, r3, r4
 800584a:	1e55      	subs	r5, r2, #1
 800584c:	4093      	lsls	r3, r2
 800584e:	4321      	orrs	r1, r4
 8005850:	1b42      	subs	r2, r0, r5
 8005852:	e78a      	b.n	800576a <__ieee754_sqrt+0x66>
 8005854:	4610      	mov	r0, r2
 8005856:	e7f0      	b.n	800583a <__ieee754_sqrt+0x136>
 8005858:	0049      	lsls	r1, r1, #1
 800585a:	3201      	adds	r2, #1
 800585c:	e7ef      	b.n	800583e <__ieee754_sqrt+0x13a>
 800585e:	4680      	mov	r8, r0
 8005860:	e7bd      	b.n	80057de <__ieee754_sqrt+0xda>
 8005862:	bf00      	nop
 8005864:	7ff00000 	.word	0x7ff00000

08005868 <__ieee754_asinf>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	ee10 5a10 	vmov	r5, s0
 800586e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005872:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005876:	ed2d 8b04 	vpush	{d8-d9}
 800587a:	d10c      	bne.n	8005896 <__ieee754_asinf+0x2e>
 800587c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80059f4 <__ieee754_asinf+0x18c>
 8005880:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80059f8 <__ieee754_asinf+0x190>
 8005884:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005888:	eee0 7a07 	vfma.f32	s15, s0, s14
 800588c:	eeb0 0a67 	vmov.f32	s0, s15
 8005890:	ecbd 8b04 	vpop	{d8-d9}
 8005894:	bd38      	pop	{r3, r4, r5, pc}
 8005896:	dd04      	ble.n	80058a2 <__ieee754_asinf+0x3a>
 8005898:	ee70 7a40 	vsub.f32	s15, s0, s0
 800589c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80058a0:	e7f6      	b.n	8005890 <__ieee754_asinf+0x28>
 80058a2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80058a6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80058aa:	da0b      	bge.n	80058c4 <__ieee754_asinf+0x5c>
 80058ac:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80058b0:	da52      	bge.n	8005958 <__ieee754_asinf+0xf0>
 80058b2:	eddf 7a52 	vldr	s15, [pc, #328]	; 80059fc <__ieee754_asinf+0x194>
 80058b6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80058ba:	eef4 7ae8 	vcmpe.f32	s15, s17
 80058be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c2:	dce5      	bgt.n	8005890 <__ieee754_asinf+0x28>
 80058c4:	f000 fa2e 	bl	8005d24 <fabsf>
 80058c8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80058cc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80058d0:	ee20 8a08 	vmul.f32	s16, s0, s16
 80058d4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8005a00 <__ieee754_asinf+0x198>
 80058d8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005a04 <__ieee754_asinf+0x19c>
 80058dc:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8005a08 <__ieee754_asinf+0x1a0>
 80058e0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80058e4:	eddf 7a49 	vldr	s15, [pc, #292]	; 8005a0c <__ieee754_asinf+0x1a4>
 80058e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80058ec:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8005a10 <__ieee754_asinf+0x1a8>
 80058f0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80058f4:	eddf 7a47 	vldr	s15, [pc, #284]	; 8005a14 <__ieee754_asinf+0x1ac>
 80058f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80058fc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005a18 <__ieee754_asinf+0x1b0>
 8005900:	eea7 9a88 	vfma.f32	s18, s15, s16
 8005904:	eddf 7a45 	vldr	s15, [pc, #276]	; 8005a1c <__ieee754_asinf+0x1b4>
 8005908:	eee8 7a07 	vfma.f32	s15, s16, s14
 800590c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8005a20 <__ieee754_asinf+0x1b8>
 8005910:	eea7 7a88 	vfma.f32	s14, s15, s16
 8005914:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005a24 <__ieee754_asinf+0x1bc>
 8005918:	eee7 7a08 	vfma.f32	s15, s14, s16
 800591c:	eeb0 0a48 	vmov.f32	s0, s16
 8005920:	eee7 8a88 	vfma.f32	s17, s15, s16
 8005924:	f000 f926 	bl	8005b74 <__ieee754_sqrtf>
 8005928:	4b3f      	ldr	r3, [pc, #252]	; (8005a28 <__ieee754_asinf+0x1c0>)
 800592a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800592e:	429c      	cmp	r4, r3
 8005930:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8005934:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005938:	dd3d      	ble.n	80059b6 <__ieee754_asinf+0x14e>
 800593a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800593e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8005a2c <__ieee754_asinf+0x1c4>
 8005942:	eee0 7a26 	vfma.f32	s15, s0, s13
 8005946:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80059f8 <__ieee754_asinf+0x190>
 800594a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800594e:	2d00      	cmp	r5, #0
 8005950:	bfd8      	it	le
 8005952:	eeb1 0a40 	vnegle.f32	s0, s0
 8005956:	e79b      	b.n	8005890 <__ieee754_asinf+0x28>
 8005958:	ee60 7a00 	vmul.f32	s15, s0, s0
 800595c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8005a00 <__ieee754_asinf+0x198>
 8005960:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005a04 <__ieee754_asinf+0x19c>
 8005964:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8005a18 <__ieee754_asinf+0x1b0>
 8005968:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800596c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8005a0c <__ieee754_asinf+0x1a4>
 8005970:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005974:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005a10 <__ieee754_asinf+0x1a8>
 8005978:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800597c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005a14 <__ieee754_asinf+0x1ac>
 8005980:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005984:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005a08 <__ieee754_asinf+0x1a0>
 8005988:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800598c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8005a1c <__ieee754_asinf+0x1b4>
 8005990:	eee7 6a86 	vfma.f32	s13, s15, s12
 8005994:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8005a20 <__ieee754_asinf+0x1b8>
 8005998:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800599c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8005a24 <__ieee754_asinf+0x1bc>
 80059a0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80059a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059a8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80059ac:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80059b0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80059b4:	e76c      	b.n	8005890 <__ieee754_asinf+0x28>
 80059b6:	ee10 3a10 	vmov	r3, s0
 80059ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80059be:	f023 030f 	bic.w	r3, r3, #15
 80059c2:	ee07 3a10 	vmov	s14, r3
 80059c6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80059ca:	ee70 7a07 	vadd.f32	s15, s0, s14
 80059ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80059d2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80059d6:	eddf 7a07 	vldr	s15, [pc, #28]	; 80059f4 <__ieee754_asinf+0x18c>
 80059da:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80059de:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80059e2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005a30 <__ieee754_asinf+0x1c8>
 80059e6:	eeb0 6a40 	vmov.f32	s12, s0
 80059ea:	eea7 6a66 	vfms.f32	s12, s14, s13
 80059ee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80059f2:	e7aa      	b.n	800594a <__ieee754_asinf+0xe2>
 80059f4:	b33bbd2e 	.word	0xb33bbd2e
 80059f8:	3fc90fdb 	.word	0x3fc90fdb
 80059fc:	7149f2ca 	.word	0x7149f2ca
 8005a00:	3811ef08 	.word	0x3811ef08
 8005a04:	3a4f7f04 	.word	0x3a4f7f04
 8005a08:	3e2aaaab 	.word	0x3e2aaaab
 8005a0c:	bd241146 	.word	0xbd241146
 8005a10:	3e4e0aa8 	.word	0x3e4e0aa8
 8005a14:	bea6b090 	.word	0xbea6b090
 8005a18:	3d9dc62e 	.word	0x3d9dc62e
 8005a1c:	bf303361 	.word	0xbf303361
 8005a20:	4001572d 	.word	0x4001572d
 8005a24:	c019d139 	.word	0xc019d139
 8005a28:	3f799999 	.word	0x3f799999
 8005a2c:	333bbd2e 	.word	0x333bbd2e
 8005a30:	3f490fdb 	.word	0x3f490fdb

08005a34 <__ieee754_atan2f>:
 8005a34:	ee10 2a90 	vmov	r2, s1
 8005a38:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8005a3c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005a40:	b510      	push	{r4, lr}
 8005a42:	eef0 7a40 	vmov.f32	s15, s0
 8005a46:	dc06      	bgt.n	8005a56 <__ieee754_atan2f+0x22>
 8005a48:	ee10 0a10 	vmov	r0, s0
 8005a4c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005a50:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005a54:	dd04      	ble.n	8005a60 <__ieee754_atan2f+0x2c>
 8005a56:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a5e:	bd10      	pop	{r4, pc}
 8005a60:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8005a64:	d103      	bne.n	8005a6e <__ieee754_atan2f+0x3a>
 8005a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a6a:	f000 b887 	b.w	8005b7c <atanf>
 8005a6e:	1794      	asrs	r4, r2, #30
 8005a70:	f004 0402 	and.w	r4, r4, #2
 8005a74:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005a78:	b943      	cbnz	r3, 8005a8c <__ieee754_atan2f+0x58>
 8005a7a:	2c02      	cmp	r4, #2
 8005a7c:	d05e      	beq.n	8005b3c <__ieee754_atan2f+0x108>
 8005a7e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005b50 <__ieee754_atan2f+0x11c>
 8005a82:	2c03      	cmp	r4, #3
 8005a84:	bf08      	it	eq
 8005a86:	eef0 7a47 	vmoveq.f32	s15, s14
 8005a8a:	e7e6      	b.n	8005a5a <__ieee754_atan2f+0x26>
 8005a8c:	b941      	cbnz	r1, 8005aa0 <__ieee754_atan2f+0x6c>
 8005a8e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005b54 <__ieee754_atan2f+0x120>
 8005a92:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8005b58 <__ieee754_atan2f+0x124>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	bfb8      	it	lt
 8005a9a:	eef0 7a40 	vmovlt.f32	s15, s0
 8005a9e:	e7dc      	b.n	8005a5a <__ieee754_atan2f+0x26>
 8005aa0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005aa4:	d110      	bne.n	8005ac8 <__ieee754_atan2f+0x94>
 8005aa6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005aaa:	f104 34ff 	add.w	r4, r4, #4294967295
 8005aae:	d107      	bne.n	8005ac0 <__ieee754_atan2f+0x8c>
 8005ab0:	2c02      	cmp	r4, #2
 8005ab2:	d846      	bhi.n	8005b42 <__ieee754_atan2f+0x10e>
 8005ab4:	4b29      	ldr	r3, [pc, #164]	; (8005b5c <__ieee754_atan2f+0x128>)
 8005ab6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005aba:	edd4 7a00 	vldr	s15, [r4]
 8005abe:	e7cc      	b.n	8005a5a <__ieee754_atan2f+0x26>
 8005ac0:	2c02      	cmp	r4, #2
 8005ac2:	d841      	bhi.n	8005b48 <__ieee754_atan2f+0x114>
 8005ac4:	4b26      	ldr	r3, [pc, #152]	; (8005b60 <__ieee754_atan2f+0x12c>)
 8005ac6:	e7f6      	b.n	8005ab6 <__ieee754_atan2f+0x82>
 8005ac8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005acc:	d0df      	beq.n	8005a8e <__ieee754_atan2f+0x5a>
 8005ace:	1a5b      	subs	r3, r3, r1
 8005ad0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8005ad4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8005ad8:	da1a      	bge.n	8005b10 <__ieee754_atan2f+0xdc>
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	da01      	bge.n	8005ae2 <__ieee754_atan2f+0xae>
 8005ade:	313c      	adds	r1, #60	; 0x3c
 8005ae0:	db19      	blt.n	8005b16 <__ieee754_atan2f+0xe2>
 8005ae2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8005ae6:	f000 f91d 	bl	8005d24 <fabsf>
 8005aea:	f000 f847 	bl	8005b7c <atanf>
 8005aee:	eef0 7a40 	vmov.f32	s15, s0
 8005af2:	2c01      	cmp	r4, #1
 8005af4:	d012      	beq.n	8005b1c <__ieee754_atan2f+0xe8>
 8005af6:	2c02      	cmp	r4, #2
 8005af8:	d017      	beq.n	8005b2a <__ieee754_atan2f+0xf6>
 8005afa:	2c00      	cmp	r4, #0
 8005afc:	d0ad      	beq.n	8005a5a <__ieee754_atan2f+0x26>
 8005afe:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8005b64 <__ieee754_atan2f+0x130>
 8005b02:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005b06:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005b68 <__ieee754_atan2f+0x134>
 8005b0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005b0e:	e7a4      	b.n	8005a5a <__ieee754_atan2f+0x26>
 8005b10:	eddf 7a10 	vldr	s15, [pc, #64]	; 8005b54 <__ieee754_atan2f+0x120>
 8005b14:	e7ed      	b.n	8005af2 <__ieee754_atan2f+0xbe>
 8005b16:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005b6c <__ieee754_atan2f+0x138>
 8005b1a:	e7ea      	b.n	8005af2 <__ieee754_atan2f+0xbe>
 8005b1c:	ee17 3a90 	vmov	r3, s15
 8005b20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	e797      	b.n	8005a5a <__ieee754_atan2f+0x26>
 8005b2a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005b64 <__ieee754_atan2f+0x130>
 8005b2e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005b32:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8005b68 <__ieee754_atan2f+0x134>
 8005b36:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005b3a:	e78e      	b.n	8005a5a <__ieee754_atan2f+0x26>
 8005b3c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8005b68 <__ieee754_atan2f+0x134>
 8005b40:	e78b      	b.n	8005a5a <__ieee754_atan2f+0x26>
 8005b42:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8005b70 <__ieee754_atan2f+0x13c>
 8005b46:	e788      	b.n	8005a5a <__ieee754_atan2f+0x26>
 8005b48:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005b6c <__ieee754_atan2f+0x138>
 8005b4c:	e785      	b.n	8005a5a <__ieee754_atan2f+0x26>
 8005b4e:	bf00      	nop
 8005b50:	c0490fdb 	.word	0xc0490fdb
 8005b54:	3fc90fdb 	.word	0x3fc90fdb
 8005b58:	bfc90fdb 	.word	0xbfc90fdb
 8005b5c:	08005d94 	.word	0x08005d94
 8005b60:	08005da0 	.word	0x08005da0
 8005b64:	33bbbd2e 	.word	0x33bbbd2e
 8005b68:	40490fdb 	.word	0x40490fdb
 8005b6c:	00000000 	.word	0x00000000
 8005b70:	3f490fdb 	.word	0x3f490fdb

08005b74 <__ieee754_sqrtf>:
 8005b74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005b78:	4770      	bx	lr
	...

08005b7c <atanf>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	ee10 5a10 	vmov	r5, s0
 8005b82:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005b86:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8005b8a:	eef0 7a40 	vmov.f32	s15, s0
 8005b8e:	db10      	blt.n	8005bb2 <atanf+0x36>
 8005b90:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005b94:	dd04      	ble.n	8005ba0 <atanf+0x24>
 8005b96:	ee70 7a00 	vadd.f32	s15, s0, s0
 8005b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8005cd8 <atanf+0x15c>
 8005ba4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8005cdc <atanf+0x160>
 8005ba8:	2d00      	cmp	r5, #0
 8005baa:	bfd8      	it	le
 8005bac:	eef0 7a40 	vmovle.f32	s15, s0
 8005bb0:	e7f3      	b.n	8005b9a <atanf+0x1e>
 8005bb2:	4b4b      	ldr	r3, [pc, #300]	; (8005ce0 <atanf+0x164>)
 8005bb4:	429c      	cmp	r4, r3
 8005bb6:	dc10      	bgt.n	8005bda <atanf+0x5e>
 8005bb8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005bbc:	da0a      	bge.n	8005bd4 <atanf+0x58>
 8005bbe:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005ce4 <atanf+0x168>
 8005bc2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd2:	dce2      	bgt.n	8005b9a <atanf+0x1e>
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	e013      	b.n	8005c02 <atanf+0x86>
 8005bda:	f000 f8a3 	bl	8005d24 <fabsf>
 8005bde:	4b42      	ldr	r3, [pc, #264]	; (8005ce8 <atanf+0x16c>)
 8005be0:	429c      	cmp	r4, r3
 8005be2:	dc4f      	bgt.n	8005c84 <atanf+0x108>
 8005be4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005be8:	429c      	cmp	r4, r3
 8005bea:	dc41      	bgt.n	8005c70 <atanf+0xf4>
 8005bec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005bf0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005bf4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005bfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005c08:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005cec <atanf+0x170>
 8005c0c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8005cf0 <atanf+0x174>
 8005c10:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8005cf4 <atanf+0x178>
 8005c14:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005c18:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005c1c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005cf8 <atanf+0x17c>
 8005c20:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005c24:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005cfc <atanf+0x180>
 8005c28:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005c2c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005d00 <atanf+0x184>
 8005c30:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005c34:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005d04 <atanf+0x188>
 8005c38:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005c3c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005d08 <atanf+0x18c>
 8005c40:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005c44:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005d0c <atanf+0x190>
 8005c48:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005c4c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8005d10 <atanf+0x194>
 8005c50:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005c54:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005d14 <atanf+0x198>
 8005c58:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005c5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005c60:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005c64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c68:	d121      	bne.n	8005cae <atanf+0x132>
 8005c6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c6e:	e794      	b.n	8005b9a <atanf+0x1e>
 8005c70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005c74:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005c78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005c82:	e7be      	b.n	8005c02 <atanf+0x86>
 8005c84:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <atanf+0x19c>)
 8005c86:	429c      	cmp	r4, r3
 8005c88:	dc0b      	bgt.n	8005ca2 <atanf+0x126>
 8005c8a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8005c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c92:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005c96:	2302      	movs	r3, #2
 8005c98:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca0:	e7af      	b.n	8005c02 <atanf+0x86>
 8005ca2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005ca6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005caa:	2303      	movs	r3, #3
 8005cac:	e7a9      	b.n	8005c02 <atanf+0x86>
 8005cae:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <atanf+0x1a0>)
 8005cb0:	491b      	ldr	r1, [pc, #108]	; (8005d20 <atanf+0x1a4>)
 8005cb2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005cb6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005cba:	ed93 0a00 	vldr	s0, [r3]
 8005cbe:	ee37 7a40 	vsub.f32	s14, s14, s0
 8005cc2:	ed92 0a00 	vldr	s0, [r2]
 8005cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005cd0:	bfb8      	it	lt
 8005cd2:	eef1 7a67 	vneglt.f32	s15, s15
 8005cd6:	e760      	b.n	8005b9a <atanf+0x1e>
 8005cd8:	3fc90fdb 	.word	0x3fc90fdb
 8005cdc:	bfc90fdb 	.word	0xbfc90fdb
 8005ce0:	3edfffff 	.word	0x3edfffff
 8005ce4:	7149f2ca 	.word	0x7149f2ca
 8005ce8:	3f97ffff 	.word	0x3f97ffff
 8005cec:	3c8569d7 	.word	0x3c8569d7
 8005cf0:	3d4bda59 	.word	0x3d4bda59
 8005cf4:	bd6ef16b 	.word	0xbd6ef16b
 8005cf8:	3d886b35 	.word	0x3d886b35
 8005cfc:	3dba2e6e 	.word	0x3dba2e6e
 8005d00:	3e124925 	.word	0x3e124925
 8005d04:	3eaaaaab 	.word	0x3eaaaaab
 8005d08:	bd15a221 	.word	0xbd15a221
 8005d0c:	bd9d8795 	.word	0xbd9d8795
 8005d10:	bde38e38 	.word	0xbde38e38
 8005d14:	be4ccccd 	.word	0xbe4ccccd
 8005d18:	401bffff 	.word	0x401bffff
 8005d1c:	08005dac 	.word	0x08005dac
 8005d20:	08005dbc 	.word	0x08005dbc

08005d24 <fabsf>:
 8005d24:	ee10 3a10 	vmov	r3, s0
 8005d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d2c:	ee00 3a10 	vmov	s0, r3
 8005d30:	4770      	bx	lr
	...

08005d34 <nanf>:
 8005d34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005d3c <nanf+0x8>
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	7fc00000 	.word	0x7fc00000

08005d40 <_init>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	bf00      	nop
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr

08005d4c <_fini>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr
